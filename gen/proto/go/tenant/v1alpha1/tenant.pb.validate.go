// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tenant/v1alpha1/tenant.proto

package tenantv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetTenantByPublicKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTenantByPublicKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantByPublicKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantByPublicKeyRequestMultiError, or nil if none found.
func (m *GetTenantByPublicKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantByPublicKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublickeyHash

	if len(errors) > 0 {
		return GetTenantByPublicKeyRequestMultiError(errors)
	}
	return nil
}

// GetTenantByPublicKeyRequestMultiError is an error wrapping multiple
// validation errors returned by GetTenantByPublicKeyRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTenantByPublicKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantByPublicKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantByPublicKeyRequestMultiError) AllErrors() []error { return m }

// GetTenantByPublicKeyRequestValidationError is the validation error returned
// by GetTenantByPublicKeyRequest.Validate if the designated constraints
// aren't met.
type GetTenantByPublicKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantByPublicKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantByPublicKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantByPublicKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantByPublicKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantByPublicKeyRequestValidationError) ErrorName() string {
	return "GetTenantByPublicKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTenantByPublicKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantByPublicKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantByPublicKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantByPublicKeyRequestValidationError{}

// Validate checks the field values on GetTenantByPublicKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTenantByPublicKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantByPublicKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantByPublicKeyResponseMultiError, or nil if none found.
func (m *GetTenantByPublicKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantByPublicKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for AccessBrokerUrl

	if len(errors) > 0 {
		return GetTenantByPublicKeyResponseMultiError(errors)
	}
	return nil
}

// GetTenantByPublicKeyResponseMultiError is an error wrapping multiple
// validation errors returned by GetTenantByPublicKeyResponse.ValidateAll() if
// the designated constraints aren't met.
type GetTenantByPublicKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantByPublicKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantByPublicKeyResponseMultiError) AllErrors() []error { return m }

// GetTenantByPublicKeyResponseValidationError is the validation error returned
// by GetTenantByPublicKeyResponse.Validate if the designated constraints
// aren't met.
type GetTenantByPublicKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantByPublicKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantByPublicKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantByPublicKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantByPublicKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantByPublicKeyResponseValidationError) ErrorName() string {
	return "GetTenantByPublicKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTenantByPublicKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantByPublicKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantByPublicKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantByPublicKeyResponseValidationError{}

// Validate checks the field values on UserBelongsToTenantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserBelongsToTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserBelongsToTenantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserBelongsToTenantRequestMultiError, or nil if none found.
func (m *UserBelongsToTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserBelongsToTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserEmailAddress

	// no validation rules for TenantId

	if len(errors) > 0 {
		return UserBelongsToTenantRequestMultiError(errors)
	}
	return nil
}

// UserBelongsToTenantRequestMultiError is an error wrapping multiple
// validation errors returned by UserBelongsToTenantRequest.ValidateAll() if
// the designated constraints aren't met.
type UserBelongsToTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserBelongsToTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserBelongsToTenantRequestMultiError) AllErrors() []error { return m }

// UserBelongsToTenantRequestValidationError is the validation error returned
// by UserBelongsToTenantRequest.Validate if the designated constraints aren't met.
type UserBelongsToTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserBelongsToTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserBelongsToTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserBelongsToTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserBelongsToTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserBelongsToTenantRequestValidationError) ErrorName() string {
	return "UserBelongsToTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserBelongsToTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserBelongsToTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserBelongsToTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserBelongsToTenantRequestValidationError{}

// Validate checks the field values on UserBelongsToTenantResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserBelongsToTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserBelongsToTenantResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserBelongsToTenantResponseMultiError, or nil if none found.
func (m *UserBelongsToTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserBelongsToTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsMember

	if len(errors) > 0 {
		return UserBelongsToTenantResponseMultiError(errors)
	}
	return nil
}

// UserBelongsToTenantResponseMultiError is an error wrapping multiple
// validation errors returned by UserBelongsToTenantResponse.ValidateAll() if
// the designated constraints aren't met.
type UserBelongsToTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserBelongsToTenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserBelongsToTenantResponseMultiError) AllErrors() []error { return m }

// UserBelongsToTenantResponseValidationError is the validation error returned
// by UserBelongsToTenantResponse.Validate if the designated constraints
// aren't met.
type UserBelongsToTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserBelongsToTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserBelongsToTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserBelongsToTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserBelongsToTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserBelongsToTenantResponseValidationError) ErrorName() string {
	return "UserBelongsToTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserBelongsToTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserBelongsToTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserBelongsToTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserBelongsToTenantResponseValidationError{}
