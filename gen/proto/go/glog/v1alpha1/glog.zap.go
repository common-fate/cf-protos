// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: glog/v1alpha1/glog.proto

package glogv1alpha1

import (
	fmt "fmt"
	math "math"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	go_uber_org_zap_zapcore "go.uber.org/zap/zapcore"
	github_com_golang_protobuf_ptypes "github.com/golang/protobuf/ptypes"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (m *UpdateConfigPayload) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "config_sha256" // field config_sha256 = 1
	enc.AddByteString(keyName, m.ConfigSha256)

	return nil
}

func (m *Envelope) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "payload" // field payload = 1
	if m.Payload != nil {
		var vv interface{} = m.Payload
		if marshaler, ok := vv.(go_uber_org_zap_zapcore.ObjectMarshaler); ok {
			enc.AddObject(keyName, marshaler)
		}
	}

	keyName = "signature" // field signature = 2
	enc.AddByteString(keyName, m.Signature)

	return nil
}

func (m *TimestampedPayload) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "update_config" // field update_config = 1
	if ov, ok := m.GetContents().(*TimestampedPayload_UpdateConfig); ok {
		_ = ov
		if ov.UpdateConfig != nil {
			var vv interface{} = ov.UpdateConfig
			if marshaler, ok := vv.(go_uber_org_zap_zapcore.ObjectMarshaler); ok {
				enc.AddObject(keyName, marshaler)
			}
		}
	}

	keyName = "timestamp" // field timestamp = 2
	if t, err := github_com_golang_protobuf_ptypes.Timestamp(m.Timestamp); err == nil {
		enc.AddTime(keyName, t)
	}

	return nil
}

func (m *StoreRequest) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "envelope" // field envelope = 1
	if m.Envelope != nil {
		var vv interface{} = m.Envelope
		if marshaler, ok := vv.(go_uber_org_zap_zapcore.ObjectMarshaler); ok {
			enc.AddObject(keyName, marshaler)
		}
	}

	return nil
}

func (m *StoreResponse) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	return nil
}
