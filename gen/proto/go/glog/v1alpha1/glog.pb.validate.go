// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: glog/v1alpha1/glog.proto

package glogv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpdateConfigPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConfigPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConfigPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConfigPayloadMultiError, or nil if none found.
func (m *UpdateConfigPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConfigPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetConfigSha256()) != 32 {
		err := UpdateConfigPayloadValidationError{
			field:  "ConfigSha256",
			reason: "value length must be 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateConfigPayloadMultiError(errors)
	}
	return nil
}

// UpdateConfigPayloadMultiError is an error wrapping multiple validation
// errors returned by UpdateConfigPayload.ValidateAll() if the designated
// constraints aren't met.
type UpdateConfigPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConfigPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConfigPayloadMultiError) AllErrors() []error { return m }

// UpdateConfigPayloadValidationError is the validation error returned by
// UpdateConfigPayload.Validate if the designated constraints aren't met.
type UpdateConfigPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigPayloadValidationError) ErrorName() string {
	return "UpdateConfigPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigPayloadValidationError{}

// Validate checks the field values on Envelope with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Envelope) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Envelope with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnvelopeMultiError, or nil
// if none found.
func (m *Envelope) ValidateAll() error {
	return m.validate(true)
}

func (m *Envelope) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPayload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EnvelopeValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EnvelopeValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnvelopeValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetSignature()) != 64 {
		err := EnvelopeValidationError{
			field:  "Signature",
			reason: "value length must be 64 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EnvelopeMultiError(errors)
	}
	return nil
}

// EnvelopeMultiError is an error wrapping multiple validation errors returned
// by Envelope.ValidateAll() if the designated constraints aren't met.
type EnvelopeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnvelopeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnvelopeMultiError) AllErrors() []error { return m }

// EnvelopeValidationError is the validation error returned by
// Envelope.Validate if the designated constraints aren't met.
type EnvelopeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvelopeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvelopeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvelopeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvelopeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvelopeValidationError) ErrorName() string { return "EnvelopeValidationError" }

// Error satisfies the builtin error interface
func (e EnvelopeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvelope.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvelopeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvelopeValidationError{}

// Validate checks the field values on TimestampedPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimestampedPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimestampedPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimestampedPayloadMultiError, or nil if none found.
func (m *TimestampedPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *TimestampedPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimestampedPayloadValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimestampedPayloadValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimestampedPayloadValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Contents.(type) {

	case *TimestampedPayload_UpdateConfig:

		if all {
			switch v := interface{}(m.GetUpdateConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimestampedPayloadValidationError{
						field:  "UpdateConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimestampedPayloadValidationError{
						field:  "UpdateConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdateConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimestampedPayloadValidationError{
					field:  "UpdateConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TimestampedPayloadMultiError(errors)
	}
	return nil
}

// TimestampedPayloadMultiError is an error wrapping multiple validation errors
// returned by TimestampedPayload.ValidateAll() if the designated constraints
// aren't met.
type TimestampedPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimestampedPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimestampedPayloadMultiError) AllErrors() []error { return m }

// TimestampedPayloadValidationError is the validation error returned by
// TimestampedPayload.Validate if the designated constraints aren't met.
type TimestampedPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampedPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampedPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampedPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampedPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampedPayloadValidationError) ErrorName() string {
	return "TimestampedPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e TimestampedPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampedPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampedPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampedPayloadValidationError{}

// Validate checks the field values on StoreRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoreRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StoreRequestMultiError, or
// nil if none found.
func (m *StoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEnvelope()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoreRequestValidationError{
					field:  "Envelope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoreRequestValidationError{
					field:  "Envelope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnvelope()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoreRequestValidationError{
				field:  "Envelope",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StoreRequestMultiError(errors)
	}
	return nil
}

// StoreRequestMultiError is an error wrapping multiple validation errors
// returned by StoreRequest.ValidateAll() if the designated constraints aren't met.
type StoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreRequestMultiError) AllErrors() []error { return m }

// StoreRequestValidationError is the validation error returned by
// StoreRequest.Validate if the designated constraints aren't met.
type StoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreRequestValidationError) ErrorName() string { return "StoreRequestValidationError" }

// Error satisfies the builtin error interface
func (e StoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreRequestValidationError{}

// Validate checks the field values on StoreResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoreResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StoreResponseMultiError, or
// nil if none found.
func (m *StoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StoreResponseMultiError(errors)
	}
	return nil
}

// StoreResponseMultiError is an error wrapping multiple validation errors
// returned by StoreResponse.ValidateAll() if the designated constraints
// aren't met.
type StoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreResponseMultiError) AllErrors() []error { return m }

// StoreResponseValidationError is the validation error returned by
// StoreResponse.Validate if the designated constraints aren't met.
type StoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreResponseValidationError) ErrorName() string { return "StoreResponseValidationError" }

// Error satisfies the builtin error interface
func (e StoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreResponseValidationError{}
