// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package certrailv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CertrailServiceClient is the client API for CertrailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CertrailServiceClient interface {
	// Store a payload in the transparency log
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	GetEntries(ctx context.Context, in *GetEntriesRequest, opts ...grpc.CallOption) (*GetEntriesResponse, error)
	// used by the access handler
	GetEntryIndexByMerkleHash(ctx context.Context, in *GetEntryIndexByMerkleHashRequest, opts ...grpc.CallOption) (*GetEntryIndexByMerkleHashResponse, error)
	GetLatestSignedLogRoot(ctx context.Context, in *GetLatestSignedLogRootRequest, opts ...grpc.CallOption) (*GetLatestSignedLogRootResponse, error)
}

type certrailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCertrailServiceClient(cc grpc.ClientConnInterface) CertrailServiceClient {
	return &certrailServiceClient{cc}
}

func (c *certrailServiceClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, "/certrail.v1alpha1.CertrailService/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certrailServiceClient) GetEntries(ctx context.Context, in *GetEntriesRequest, opts ...grpc.CallOption) (*GetEntriesResponse, error) {
	out := new(GetEntriesResponse)
	err := c.cc.Invoke(ctx, "/certrail.v1alpha1.CertrailService/GetEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certrailServiceClient) GetEntryIndexByMerkleHash(ctx context.Context, in *GetEntryIndexByMerkleHashRequest, opts ...grpc.CallOption) (*GetEntryIndexByMerkleHashResponse, error) {
	out := new(GetEntryIndexByMerkleHashResponse)
	err := c.cc.Invoke(ctx, "/certrail.v1alpha1.CertrailService/GetEntryIndexByMerkleHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certrailServiceClient) GetLatestSignedLogRoot(ctx context.Context, in *GetLatestSignedLogRootRequest, opts ...grpc.CallOption) (*GetLatestSignedLogRootResponse, error) {
	out := new(GetLatestSignedLogRootResponse)
	err := c.cc.Invoke(ctx, "/certrail.v1alpha1.CertrailService/GetLatestSignedLogRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertrailServiceServer is the server API for CertrailService service.
// All implementations should embed UnimplementedCertrailServiceServer
// for forward compatibility
type CertrailServiceServer interface {
	// Store a payload in the transparency log
	Store(context.Context, *StoreRequest) (*StoreResponse, error)
	GetEntries(context.Context, *GetEntriesRequest) (*GetEntriesResponse, error)
	// used by the access handler
	GetEntryIndexByMerkleHash(context.Context, *GetEntryIndexByMerkleHashRequest) (*GetEntryIndexByMerkleHashResponse, error)
	GetLatestSignedLogRoot(context.Context, *GetLatestSignedLogRootRequest) (*GetLatestSignedLogRootResponse, error)
}

// UnimplementedCertrailServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCertrailServiceServer struct {
}

func (UnimplementedCertrailServiceServer) Store(context.Context, *StoreRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedCertrailServiceServer) GetEntries(context.Context, *GetEntriesRequest) (*GetEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntries not implemented")
}
func (UnimplementedCertrailServiceServer) GetEntryIndexByMerkleHash(context.Context, *GetEntryIndexByMerkleHashRequest) (*GetEntryIndexByMerkleHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntryIndexByMerkleHash not implemented")
}
func (UnimplementedCertrailServiceServer) GetLatestSignedLogRoot(context.Context, *GetLatestSignedLogRootRequest) (*GetLatestSignedLogRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestSignedLogRoot not implemented")
}

// UnsafeCertrailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CertrailServiceServer will
// result in compilation errors.
type UnsafeCertrailServiceServer interface {
	mustEmbedUnimplementedCertrailServiceServer()
}

func RegisterCertrailServiceServer(s grpc.ServiceRegistrar, srv CertrailServiceServer) {
	s.RegisterService(&CertrailService_ServiceDesc, srv)
}

func _CertrailService_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertrailServiceServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certrail.v1alpha1.CertrailService/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertrailServiceServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertrailService_GetEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertrailServiceServer).GetEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certrail.v1alpha1.CertrailService/GetEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertrailServiceServer).GetEntries(ctx, req.(*GetEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertrailService_GetEntryIndexByMerkleHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryIndexByMerkleHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertrailServiceServer).GetEntryIndexByMerkleHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certrail.v1alpha1.CertrailService/GetEntryIndexByMerkleHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertrailServiceServer).GetEntryIndexByMerkleHash(ctx, req.(*GetEntryIndexByMerkleHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertrailService_GetLatestSignedLogRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestSignedLogRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertrailServiceServer).GetLatestSignedLogRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certrail.v1alpha1.CertrailService/GetLatestSignedLogRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertrailServiceServer).GetLatestSignedLogRoot(ctx, req.(*GetLatestSignedLogRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CertrailService_ServiceDesc is the grpc.ServiceDesc for CertrailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CertrailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "certrail.v1alpha1.CertrailService",
	HandlerType: (*CertrailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _CertrailService_Store_Handler,
		},
		{
			MethodName: "GetEntries",
			Handler:    _CertrailService_GetEntries_Handler,
		},
		{
			MethodName: "GetEntryIndexByMerkleHash",
			Handler:    _CertrailService_GetEntryIndexByMerkleHash_Handler,
		},
		{
			MethodName: "GetLatestSignedLogRoot",
			Handler:    _CertrailService_GetLatestSignedLogRoot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "certrail/v1alpha1/certrail.proto",
}
