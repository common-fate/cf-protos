// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: certrail/v1alpha1/certrail.proto

package certrailv1alpha1

import (
	fmt "fmt"
	math "math"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	go_uber_org_zap_zapcore "go.uber.org/zap/zapcore"
	github_com_golang_protobuf_ptypes "github.com/golang/protobuf/ptypes"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (m *ApproveConfigPayload) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "config_sha256" // field config_sha256 = 1
	enc.AddByteString(keyName, m.ConfigSha256)

	keyName = "approved_by" // field approved_by = 2
	enc.AddByteString(keyName, m.ApprovedBy)

	return nil
}

func (m *IssueCertificatePayload) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "certificate" // field certificate = 1
	enc.AddByteString(keyName, m.Certificate)

	return nil
}

func (m *RevokeCertificatePayload) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "certificate" // field certificate = 1
	enc.AddByteString(keyName, m.Certificate)

	keyName = "revoked_by" // field revoked_by = 2
	enc.AddByteString(keyName, m.RevokedBy)

	return nil
}

func (m *Envelope) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "payload" // field payload = 1
	if m.Payload != nil {
		var vv interface{} = m.Payload
		if marshaler, ok := vv.(go_uber_org_zap_zapcore.ObjectMarshaler); ok {
			enc.AddObject(keyName, marshaler)
		}
	}

	keyName = "signature" // field signature = 2
	enc.AddByteString(keyName, m.Signature)

	return nil
}

func (m *Payload) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "timestamp" // field timestamp = 1
	if t, err := github_com_golang_protobuf_ptypes.Timestamp(m.Timestamp); err == nil {
		enc.AddTime(keyName, t)
	}

	keyName = "approve_config" // field approve_config = 2
	if ov, ok := m.GetContents().(*Payload_ApproveConfig); ok {
		_ = ov
		if ov.ApproveConfig != nil {
			var vv interface{} = ov.ApproveConfig
			if marshaler, ok := vv.(go_uber_org_zap_zapcore.ObjectMarshaler); ok {
				enc.AddObject(keyName, marshaler)
			}
		}
	}

	keyName = "issue_certificate" // field issue_certificate = 3
	if ov, ok := m.GetContents().(*Payload_IssueCertificate); ok {
		_ = ov
		if ov.IssueCertificate != nil {
			var vv interface{} = ov.IssueCertificate
			if marshaler, ok := vv.(go_uber_org_zap_zapcore.ObjectMarshaler); ok {
				enc.AddObject(keyName, marshaler)
			}
		}
	}

	keyName = "revoke_certificate" // field revoke_certificate = 4
	if ov, ok := m.GetContents().(*Payload_RevokeCertificate); ok {
		_ = ov
		if ov.RevokeCertificate != nil {
			var vv interface{} = ov.RevokeCertificate
			if marshaler, ok := vv.(go_uber_org_zap_zapcore.ObjectMarshaler); ok {
				enc.AddObject(keyName, marshaler)
			}
		}
	}

	return nil
}

func (m *StoreRequest) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "envelope" // field envelope = 1
	if m.Envelope != nil {
		var vv interface{} = m.Envelope
		if marshaler, ok := vv.(go_uber_org_zap_zapcore.ObjectMarshaler); ok {
			enc.AddObject(keyName, marshaler)
		}
	}

	return nil
}

func (m *StoreResponse) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	return nil
}

func (m *GetEntriesRequest) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "start_index" // field start_index = 1
	enc.AddInt64(keyName, m.StartIndex)

	keyName = "count" // field count = 2
	enc.AddInt64(keyName, m.Count)

	return nil
}

func (m *GetEntriesResponse) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "envelopes" // field envelopes = 1
	enc.AddArray(keyName, go_uber_org_zap_zapcore.ArrayMarshalerFunc(func(aenc go_uber_org_zap_zapcore.ArrayEncoder) error {
		for _, rv := range m.Envelopes {
			_ = rv
			if rv != nil {
				var vv interface{} = rv
				if marshaler, ok := vv.(go_uber_org_zap_zapcore.ObjectMarshaler); ok {
					aenc.AppendObject(marshaler)
				}
			}
		}
		return nil
	}))

	return nil
}

func (m *IncludedEnvelope) MarshalLogObject(enc go_uber_org_zap_zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "envelope" // field envelope = 1
	if m.Envelope != nil {
		var vv interface{} = m.Envelope
		if marshaler, ok := vv.(go_uber_org_zap_zapcore.ObjectMarshaler); ok {
			enc.AddObject(keyName, marshaler)
		}
	}

	return nil
}
