// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: certrail/v1alpha1/certrail.proto

package certrailv1alpha1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApproveConfigPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigSha256 []byte `protobuf:"bytes,1,opt,name=config_sha256,json=configSha256,proto3" json:"config_sha256,omitempty"`
	// the certificate of the approver
	ApprovedBy []byte `protobuf:"bytes,2,opt,name=approved_by,json=approvedBy,proto3" json:"approved_by,omitempty"`
}

func (x *ApproveConfigPayload) Reset() {
	*x = ApproveConfigPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveConfigPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveConfigPayload) ProtoMessage() {}

func (x *ApproveConfigPayload) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveConfigPayload.ProtoReflect.Descriptor instead.
func (*ApproveConfigPayload) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{0}
}

func (x *ApproveConfigPayload) GetConfigSha256() []byte {
	if x != nil {
		return x.ConfigSha256
	}
	return nil
}

func (x *ApproveConfigPayload) GetApprovedBy() []byte {
	if x != nil {
		return x.ApprovedBy
	}
	return nil
}

type GetEntryIndexByMerkleHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerkleHash []byte `protobuf:"bytes,1,opt,name=merkle_hash,json=merkleHash,proto3" json:"merkle_hash,omitempty"`
}

func (x *GetEntryIndexByMerkleHashRequest) Reset() {
	*x = GetEntryIndexByMerkleHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntryIndexByMerkleHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntryIndexByMerkleHashRequest) ProtoMessage() {}

func (x *GetEntryIndexByMerkleHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntryIndexByMerkleHashRequest.ProtoReflect.Descriptor instead.
func (*GetEntryIndexByMerkleHashRequest) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{1}
}

func (x *GetEntryIndexByMerkleHashRequest) GetMerkleHash() []byte {
	if x != nil {
		return x.MerkleHash
	}
	return nil
}

type GetEntryIndexByMerkleHashResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *GetEntryIndexByMerkleHashResponse) Reset() {
	*x = GetEntryIndexByMerkleHashResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntryIndexByMerkleHashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntryIndexByMerkleHashResponse) ProtoMessage() {}

func (x *GetEntryIndexByMerkleHashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntryIndexByMerkleHashResponse.ProtoReflect.Descriptor instead.
func (*GetEntryIndexByMerkleHashResponse) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{2}
}

func (x *GetEntryIndexByMerkleHashResponse) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

// a request contains the current expected params of the request
// before approving, the admin can review whether the user still has access to the role under the same conditions it was requested
type RoleAccessRequestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role     string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	// must be an aws account id
	Account         string               `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	SessionDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=session_duration,json=sessionDuration,proto3" json:"session_duration,omitempty"`
	Reason          string               `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	RequestedBy     []byte               `protobuf:"bytes,6,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
}

func (x *RoleAccessRequestPayload) Reset() {
	*x = RoleAccessRequestPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleAccessRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleAccessRequestPayload) ProtoMessage() {}

func (x *RoleAccessRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleAccessRequestPayload.ProtoReflect.Descriptor instead.
func (*RoleAccessRequestPayload) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{3}
}

func (x *RoleAccessRequestPayload) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *RoleAccessRequestPayload) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *RoleAccessRequestPayload) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *RoleAccessRequestPayload) GetSessionDuration() *durationpb.Duration {
	if x != nil {
		return x.SessionDuration
	}
	return nil
}

func (x *RoleAccessRequestPayload) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RoleAccessRequestPayload) GetRequestedBy() []byte {
	if x != nil {
		return x.RequestedBy
	}
	return nil
}

type ApprovedRoleAccessRequestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleAccessRequestTrillianMerkleHash []byte `protobuf:"bytes,1,opt,name=role_access_request_trillian_merkle_hash,json=roleAccessRequestTrillianMerkleHash,proto3" json:"role_access_request_trillian_merkle_hash,omitempty"`
	ApprovedBy                          []byte `protobuf:"bytes,2,opt,name=approved_by,json=approvedBy,proto3" json:"approved_by,omitempty"`
}

func (x *ApprovedRoleAccessRequestPayload) Reset() {
	*x = ApprovedRoleAccessRequestPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovedRoleAccessRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovedRoleAccessRequestPayload) ProtoMessage() {}

func (x *ApprovedRoleAccessRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovedRoleAccessRequestPayload.ProtoReflect.Descriptor instead.
func (*ApprovedRoleAccessRequestPayload) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{4}
}

func (x *ApprovedRoleAccessRequestPayload) GetRoleAccessRequestTrillianMerkleHash() []byte {
	if x != nil {
		return x.RoleAccessRequestTrillianMerkleHash
	}
	return nil
}

func (x *ApprovedRoleAccessRequestPayload) GetApprovedBy() []byte {
	if x != nil {
		return x.ApprovedBy
	}
	return nil
}

type DeclinedRoleAccessRequestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleAccessRequestTrillianMerkleHash []byte `protobuf:"bytes,1,opt,name=role_access_request_trillian_merkle_hash,json=roleAccessRequestTrillianMerkleHash,proto3" json:"role_access_request_trillian_merkle_hash,omitempty"`
	DeclinedBy                          []byte `protobuf:"bytes,2,opt,name=declined_by,json=declinedBy,proto3" json:"declined_by,omitempty"`
}

func (x *DeclinedRoleAccessRequestPayload) Reset() {
	*x = DeclinedRoleAccessRequestPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclinedRoleAccessRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclinedRoleAccessRequestPayload) ProtoMessage() {}

func (x *DeclinedRoleAccessRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclinedRoleAccessRequestPayload.ProtoReflect.Descriptor instead.
func (*DeclinedRoleAccessRequestPayload) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{5}
}

func (x *DeclinedRoleAccessRequestPayload) GetRoleAccessRequestTrillianMerkleHash() []byte {
	if x != nil {
		return x.RoleAccessRequestTrillianMerkleHash
	}
	return nil
}

func (x *DeclinedRoleAccessRequestPayload) GetDeclinedBy() []byte {
	if x != nil {
		return x.DeclinedBy
	}
	return nil
}

type CancelledRoleAccessRequestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleAccessRequestTrillianMerkleHash []byte `protobuf:"bytes,1,opt,name=role_access_request_trillian_merkle_hash,json=roleAccessRequestTrillianMerkleHash,proto3" json:"role_access_request_trillian_merkle_hash,omitempty"`
	CancelledBy                         []byte `protobuf:"bytes,2,opt,name=cancelled_by,json=cancelledBy,proto3" json:"cancelled_by,omitempty"`
}

func (x *CancelledRoleAccessRequestPayload) Reset() {
	*x = CancelledRoleAccessRequestPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelledRoleAccessRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelledRoleAccessRequestPayload) ProtoMessage() {}

func (x *CancelledRoleAccessRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelledRoleAccessRequestPayload.ProtoReflect.Descriptor instead.
func (*CancelledRoleAccessRequestPayload) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{6}
}

func (x *CancelledRoleAccessRequestPayload) GetRoleAccessRequestTrillianMerkleHash() []byte {
	if x != nil {
		return x.RoleAccessRequestTrillianMerkleHash
	}
	return nil
}

func (x *CancelledRoleAccessRequestPayload) GetCancelledBy() []byte {
	if x != nil {
		return x.CancelledBy
	}
	return nil
}

type IssueCertificatePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate []byte `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *IssueCertificatePayload) Reset() {
	*x = IssueCertificatePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCertificatePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCertificatePayload) ProtoMessage() {}

func (x *IssueCertificatePayload) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCertificatePayload.ProtoReflect.Descriptor instead.
func (*IssueCertificatePayload) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{7}
}

func (x *IssueCertificatePayload) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type RevokeCertificatePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate []byte `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// the certificate of the actor who is performing the revoking
	RevokedBy []byte `protobuf:"bytes,2,opt,name=revoked_by,json=revokedBy,proto3" json:"revoked_by,omitempty"`
}

func (x *RevokeCertificatePayload) Reset() {
	*x = RevokeCertificatePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeCertificatePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeCertificatePayload) ProtoMessage() {}

func (x *RevokeCertificatePayload) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeCertificatePayload.ProtoReflect.Descriptor instead.
func (*RevokeCertificatePayload) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{8}
}

func (x *RevokeCertificatePayload) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *RevokeCertificatePayload) GetRevokedBy() []byte {
	if x != nil {
		return x.RevokedBy
	}
	return nil
}

//audit trail log of user assuming a role
type AssumeAccessAuditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role     string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	// must be an aws account id
	Account         string               `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	SessionDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=session_duration,json=sessionDuration,proto3" json:"session_duration,omitempty"`
	Reason          string               `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	RequestedBy     []byte               `protobuf:"bytes,6,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	RequestedAt     string               `protobuf:"bytes,7,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at,omitempty"`
	User            string               `protobuf:"bytes,8,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *AssumeAccessAuditRequest) Reset() {
	*x = AssumeAccessAuditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssumeAccessAuditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssumeAccessAuditRequest) ProtoMessage() {}

func (x *AssumeAccessAuditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssumeAccessAuditRequest.ProtoReflect.Descriptor instead.
func (*AssumeAccessAuditRequest) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{9}
}

func (x *AssumeAccessAuditRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *AssumeAccessAuditRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *AssumeAccessAuditRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AssumeAccessAuditRequest) GetSessionDuration() *durationpb.Duration {
	if x != nil {
		return x.SessionDuration
	}
	return nil
}

func (x *AssumeAccessAuditRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AssumeAccessAuditRequest) GetRequestedBy() []byte {
	if x != nil {
		return x.RequestedBy
	}
	return nil
}

func (x *AssumeAccessAuditRequest) GetRequestedAt() string {
	if x != nil {
		return x.RequestedAt
	}
	return ""
}

func (x *AssumeAccessAuditRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

// When an access handler issues credentials to a user it is stored
// in our immutable audit trail. This allows administrators to compare
// our audit trail against their cloud providers' audit trails to verify
// that we are correctly issuing credentials and detect any discrepancies.
type IssueSessionCredentialsPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the access key ID in AWS
	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserCertificate    []byte `protobuf:"bytes,2,opt,name=user_certificate,json=userCertificate,proto3" json:"user_certificate,omitempty"`
	UserSuppliedReason string `protobuf:"bytes,3,opt,name=user_supplied_reason,json=userSuppliedReason,proto3" json:"user_supplied_reason,omitempty"`
}

func (x *IssueSessionCredentialsPayload) Reset() {
	*x = IssueSessionCredentialsPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueSessionCredentialsPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueSessionCredentialsPayload) ProtoMessage() {}

func (x *IssueSessionCredentialsPayload) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueSessionCredentialsPayload.ProtoReflect.Descriptor instead.
func (*IssueSessionCredentialsPayload) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{10}
}

func (x *IssueSessionCredentialsPayload) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IssueSessionCredentialsPayload) GetUserCertificate() []byte {
	if x != nil {
		return x.UserCertificate
	}
	return nil
}

func (x *IssueSessionCredentialsPayload) GetUserSuppliedReason() string {
	if x != nil {
		return x.UserSuppliedReason
	}
	return ""
}

type Envelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   *Payload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{11}
}

func (x *Envelope) GetPayload() *Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Envelope) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Contents:
	//	*Payload_ApproveConfig
	//	*Payload_IssueCertificate
	//	*Payload_RevokeCertificate
	//	*Payload_IssueSessionCredentials
	//	*Payload_RoleAccessRequest
	//	*Payload_ApprovedRoleAccessRequest
	//	*Payload_DeclinedRoleAccessRequest
	//	*Payload_CancelledRoleAccessRequest
	Contents isPayload_Contents `protobuf_oneof:"contents"`
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{12}
}

func (x *Payload) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *Payload) GetContents() isPayload_Contents {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (x *Payload) GetApproveConfig() *ApproveConfigPayload {
	if x, ok := x.GetContents().(*Payload_ApproveConfig); ok {
		return x.ApproveConfig
	}
	return nil
}

func (x *Payload) GetIssueCertificate() *IssueCertificatePayload {
	if x, ok := x.GetContents().(*Payload_IssueCertificate); ok {
		return x.IssueCertificate
	}
	return nil
}

func (x *Payload) GetRevokeCertificate() *RevokeCertificatePayload {
	if x, ok := x.GetContents().(*Payload_RevokeCertificate); ok {
		return x.RevokeCertificate
	}
	return nil
}

func (x *Payload) GetIssueSessionCredentials() *IssueSessionCredentialsPayload {
	if x, ok := x.GetContents().(*Payload_IssueSessionCredentials); ok {
		return x.IssueSessionCredentials
	}
	return nil
}

func (x *Payload) GetRoleAccessRequest() *RoleAccessRequestPayload {
	if x, ok := x.GetContents().(*Payload_RoleAccessRequest); ok {
		return x.RoleAccessRequest
	}
	return nil
}

func (x *Payload) GetApprovedRoleAccessRequest() *ApprovedRoleAccessRequestPayload {
	if x, ok := x.GetContents().(*Payload_ApprovedRoleAccessRequest); ok {
		return x.ApprovedRoleAccessRequest
	}
	return nil
}

func (x *Payload) GetDeclinedRoleAccessRequest() *DeclinedRoleAccessRequestPayload {
	if x, ok := x.GetContents().(*Payload_DeclinedRoleAccessRequest); ok {
		return x.DeclinedRoleAccessRequest
	}
	return nil
}

func (x *Payload) GetCancelledRoleAccessRequest() *CancelledRoleAccessRequestPayload {
	if x, ok := x.GetContents().(*Payload_CancelledRoleAccessRequest); ok {
		return x.CancelledRoleAccessRequest
	}
	return nil
}

type isPayload_Contents interface {
	isPayload_Contents()
}

type Payload_ApproveConfig struct {
	ApproveConfig *ApproveConfigPayload `protobuf:"bytes,2,opt,name=approve_config,json=approveConfig,proto3,oneof"`
}

type Payload_IssueCertificate struct {
	IssueCertificate *IssueCertificatePayload `protobuf:"bytes,3,opt,name=issue_certificate,json=issueCertificate,proto3,oneof"`
}

type Payload_RevokeCertificate struct {
	RevokeCertificate *RevokeCertificatePayload `protobuf:"bytes,4,opt,name=revoke_certificate,json=revokeCertificate,proto3,oneof"`
}

type Payload_IssueSessionCredentials struct {
	IssueSessionCredentials *IssueSessionCredentialsPayload `protobuf:"bytes,5,opt,name=issue_session_credentials,json=issueSessionCredentials,proto3,oneof"`
}

type Payload_RoleAccessRequest struct {
	RoleAccessRequest *RoleAccessRequestPayload `protobuf:"bytes,6,opt,name=role_access_request,json=roleAccessRequest,proto3,oneof"`
}

type Payload_ApprovedRoleAccessRequest struct {
	ApprovedRoleAccessRequest *ApprovedRoleAccessRequestPayload `protobuf:"bytes,7,opt,name=approved_role_access_request,json=approvedRoleAccessRequest,proto3,oneof"`
}

type Payload_DeclinedRoleAccessRequest struct {
	DeclinedRoleAccessRequest *DeclinedRoleAccessRequestPayload `protobuf:"bytes,8,opt,name=declined_role_access_request,json=declinedRoleAccessRequest,proto3,oneof"`
}

type Payload_CancelledRoleAccessRequest struct {
	CancelledRoleAccessRequest *CancelledRoleAccessRequestPayload `protobuf:"bytes,9,opt,name=cancelled_role_access_request,json=cancelledRoleAccessRequest,proto3,oneof"`
}

func (*Payload_ApproveConfig) isPayload_Contents() {}

func (*Payload_IssueCertificate) isPayload_Contents() {}

func (*Payload_RevokeCertificate) isPayload_Contents() {}

func (*Payload_IssueSessionCredentials) isPayload_Contents() {}

func (*Payload_RoleAccessRequest) isPayload_Contents() {}

func (*Payload_ApprovedRoleAccessRequest) isPayload_Contents() {}

func (*Payload_DeclinedRoleAccessRequest) isPayload_Contents() {}

func (*Payload_CancelledRoleAccessRequest) isPayload_Contents() {}

type StoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Envelope *Envelope `protobuf:"bytes,1,opt,name=envelope,proto3" json:"envelope,omitempty"`
}

func (x *StoreRequest) Reset() {
	*x = StoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreRequest) ProtoMessage() {}

func (x *StoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreRequest.ProtoReflect.Descriptor instead.
func (*StoreRequest) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{13}
}

func (x *StoreRequest) GetEnvelope() *Envelope {
	if x != nil {
		return x.Envelope
	}
	return nil
}

type StoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Contents:
	//	*StoreResponse_RoleAccessRequestId
	Contents isStoreResponse_Contents `protobuf_oneof:"contents"`
}

func (x *StoreResponse) Reset() {
	*x = StoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreResponse) ProtoMessage() {}

func (x *StoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreResponse.ProtoReflect.Descriptor instead.
func (*StoreResponse) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{14}
}

func (m *StoreResponse) GetContents() isStoreResponse_Contents {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (x *StoreResponse) GetRoleAccessRequestId() string {
	if x, ok := x.GetContents().(*StoreResponse_RoleAccessRequestId); ok {
		return x.RoleAccessRequestId
	}
	return ""
}

type isStoreResponse_Contents interface {
	isStoreResponse_Contents()
}

type StoreResponse_RoleAccessRequestId struct {
	RoleAccessRequestId string `protobuf:"bytes,1,opt,name=role_access_request_id,json=roleAccessRequestId,proto3,oneof"`
}

func (*StoreResponse_RoleAccessRequestId) isStoreResponse_Contents() {}

type GetEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartIndex int64 `protobuf:"varint,1,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	Count      int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetEntriesRequest) Reset() {
	*x = GetEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntriesRequest) ProtoMessage() {}

func (x *GetEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntriesRequest.ProtoReflect.Descriptor instead.
func (*GetEntriesRequest) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{15}
}

func (x *GetEntriesRequest) GetStartIndex() int64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *GetEntriesRequest) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetEntriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Envelopes []*IncludedEnvelope `protobuf:"bytes,1,rep,name=envelopes,proto3" json:"envelopes,omitempty"`
}

func (x *GetEntriesResponse) Reset() {
	*x = GetEntriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntriesResponse) ProtoMessage() {}

func (x *GetEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntriesResponse.ProtoReflect.Descriptor instead.
func (*GetEntriesResponse) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{16}
}

func (x *GetEntriesResponse) GetEnvelopes() []*IncludedEnvelope {
	if x != nil {
		return x.Envelopes
	}
	return nil
}

type IncludedEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Envelope *Envelope `protobuf:"bytes,1,opt,name=envelope,proto3" json:"envelope,omitempty"`
}

func (x *IncludedEnvelope) Reset() {
	*x = IncludedEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncludedEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncludedEnvelope) ProtoMessage() {}

func (x *IncludedEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncludedEnvelope.ProtoReflect.Descriptor instead.
func (*IncludedEnvelope) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{17}
}

func (x *IncludedEnvelope) GetEnvelope() *Envelope {
	if x != nil {
		return x.Envelope
	}
	return nil
}

type GetLatestSignedLogRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLatestSignedLogRootRequest) Reset() {
	*x = GetLatestSignedLogRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestSignedLogRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestSignedLogRootRequest) ProtoMessage() {}

func (x *GetLatestSignedLogRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestSignedLogRootRequest.ProtoReflect.Descriptor instead.
func (*GetLatestSignedLogRootRequest) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{18}
}

type GetLatestSignedLogRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogRoot *LogRoot `protobuf:"bytes,1,opt,name=log_root,json=logRoot,proto3" json:"log_root,omitempty"`
}

func (x *GetLatestSignedLogRootResponse) Reset() {
	*x = GetLatestSignedLogRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestSignedLogRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestSignedLogRootResponse) ProtoMessage() {}

func (x *GetLatestSignedLogRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestSignedLogRootResponse.ProtoReflect.Descriptor instead.
func (*GetLatestSignedLogRootResponse) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{19}
}

func (x *GetLatestSignedLogRootResponse) GetLogRoot() *LogRoot {
	if x != nil {
		return x.LogRoot
	}
	return nil
}

type LogRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeSize  uint64                 `protobuf:"varint,1,opt,name=tree_size,json=treeSize,proto3" json:"tree_size,omitempty"`
	RootHash  []byte                 `protobuf:"bytes,2,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *LogRoot) Reset() {
	*x = LogRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRoot) ProtoMessage() {}

func (x *LogRoot) ProtoReflect() protoreflect.Message {
	mi := &file_certrail_v1alpha1_certrail_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRoot.ProtoReflect.Descriptor instead.
func (*LogRoot) Descriptor() ([]byte, []int) {
	return file_certrail_v1alpha1_certrail_proto_rawDescGZIP(), []int{20}
}

func (x *LogRoot) GetTreeSize() uint64 {
	if x != nil {
		return x.TreeSize
	}
	return 0
}

func (x *LogRoot) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *LogRoot) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_certrail_v1alpha1_certrail_proto protoreflect.FileDescriptor

var file_certrail_v1alpha1_certrail_proto_rawDesc = []byte{
	0x0a, 0x20, 0x63, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x63, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x65, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x7a, 0x02, 0x68, 0x20, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x22, 0x43, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x79, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x39, 0x0a, 0x21, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x79, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xef, 0x01, 0x0a, 0x18, 0x52, 0x6f, 0x6c, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x0c, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x9a, 0x01, 0x0a, 0x20, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x55, 0x0a,
	0x28, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x5f, 0x6d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x23, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x42, 0x79, 0x22, 0x9a, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e,
	0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x55, 0x0a, 0x28, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x23, 0x72, 0x6f,
	0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x72, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64,
	0x42, 0x79, 0x22, 0x9d, 0x01, 0x0a, 0x21, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x52, 0x6f, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x55, 0x0a, 0x28, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x23, 0x72, 0x6f, 0x6c, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69,
	0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x42, 0x79, 0x22, 0x3b, 0x0a, 0x17, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22,
	0x5b, 0x0a, 0x18, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x22, 0xa6, 0x02, 0x0a,
	0x18, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x98, 0x01, 0x0c, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a,
	0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x8d, 0x01, 0x0a, 0x1e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x26, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x7a,
	0x03, 0x18, 0x80, 0x02, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x95, 0x07, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x50, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x11, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00,
	0x52, 0x10, 0x69, 0x73, 0x73, 0x75, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x5c, 0x0a, 0x12, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x11, 0x72,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x6f, 0x0a, 0x19, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x17, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x5d, 0x0a, 0x13, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x11, 0x72,
	0x6f, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x76, 0x0a, 0x1c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x19, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x1c, 0x64, 0x65, 0x63, 0x6c,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x63, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x19, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x79, 0x0a, 0x1d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52,
	0x1a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x47, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x74,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x22, 0x52, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x13, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x4a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x57, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x65, 0x72, 0x74,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x09,
	0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x10, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x37, 0x0a,
	0x08, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x08, 0x65, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65,
	0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74,
	0x22, 0x7d, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x72, 0x65, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x74, 0x72, 0x65, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x32,
	0xc0, 0x03, 0x0a, 0x0f, 0x43, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x2e, 0x63,
	0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x63, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x24, 0x2e,
	0x63, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x79, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x33, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x79, 0x4d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x63, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42,
	0x79, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x30, 0x2e,
	0x63, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0xdd, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0d, 0x43, 0x65,
	0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x50, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2d, 0x66, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x66, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x65, 0x72,
	0x74, 0x72, 0x61, 0x69, 0x6c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x63,
	0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2,
	0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x11, 0x43, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c,
	0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x11, 0x43, 0x65, 0x72, 0x74,
	0x72, 0x61, 0x69, 0x6c, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x1d,
	0x43, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12,
	0x43, 0x65, 0x72, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_certrail_v1alpha1_certrail_proto_rawDescOnce sync.Once
	file_certrail_v1alpha1_certrail_proto_rawDescData = file_certrail_v1alpha1_certrail_proto_rawDesc
)

func file_certrail_v1alpha1_certrail_proto_rawDescGZIP() []byte {
	file_certrail_v1alpha1_certrail_proto_rawDescOnce.Do(func() {
		file_certrail_v1alpha1_certrail_proto_rawDescData = protoimpl.X.CompressGZIP(file_certrail_v1alpha1_certrail_proto_rawDescData)
	})
	return file_certrail_v1alpha1_certrail_proto_rawDescData
}

var file_certrail_v1alpha1_certrail_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_certrail_v1alpha1_certrail_proto_goTypes = []interface{}{
	(*ApproveConfigPayload)(nil),              // 0: certrail.v1alpha1.ApproveConfigPayload
	(*GetEntryIndexByMerkleHashRequest)(nil),  // 1: certrail.v1alpha1.GetEntryIndexByMerkleHashRequest
	(*GetEntryIndexByMerkleHashResponse)(nil), // 2: certrail.v1alpha1.GetEntryIndexByMerkleHashResponse
	(*RoleAccessRequestPayload)(nil),          // 3: certrail.v1alpha1.RoleAccessRequestPayload
	(*ApprovedRoleAccessRequestPayload)(nil),  // 4: certrail.v1alpha1.ApprovedRoleAccessRequestPayload
	(*DeclinedRoleAccessRequestPayload)(nil),  // 5: certrail.v1alpha1.DeclinedRoleAccessRequestPayload
	(*CancelledRoleAccessRequestPayload)(nil), // 6: certrail.v1alpha1.CancelledRoleAccessRequestPayload
	(*IssueCertificatePayload)(nil),           // 7: certrail.v1alpha1.IssueCertificatePayload
	(*RevokeCertificatePayload)(nil),          // 8: certrail.v1alpha1.RevokeCertificatePayload
	(*AssumeAccessAuditRequest)(nil),          // 9: certrail.v1alpha1.AssumeAccessAuditRequest
	(*IssueSessionCredentialsPayload)(nil),    // 10: certrail.v1alpha1.IssueSessionCredentialsPayload
	(*Envelope)(nil),                          // 11: certrail.v1alpha1.Envelope
	(*Payload)(nil),                           // 12: certrail.v1alpha1.Payload
	(*StoreRequest)(nil),                      // 13: certrail.v1alpha1.StoreRequest
	(*StoreResponse)(nil),                     // 14: certrail.v1alpha1.StoreResponse
	(*GetEntriesRequest)(nil),                 // 15: certrail.v1alpha1.GetEntriesRequest
	(*GetEntriesResponse)(nil),                // 16: certrail.v1alpha1.GetEntriesResponse
	(*IncludedEnvelope)(nil),                  // 17: certrail.v1alpha1.IncludedEnvelope
	(*GetLatestSignedLogRootRequest)(nil),     // 18: certrail.v1alpha1.GetLatestSignedLogRootRequest
	(*GetLatestSignedLogRootResponse)(nil),    // 19: certrail.v1alpha1.GetLatestSignedLogRootResponse
	(*LogRoot)(nil),                           // 20: certrail.v1alpha1.LogRoot
	(*durationpb.Duration)(nil),               // 21: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),             // 22: google.protobuf.Timestamp
}
var file_certrail_v1alpha1_certrail_proto_depIdxs = []int32{
	21, // 0: certrail.v1alpha1.RoleAccessRequestPayload.session_duration:type_name -> google.protobuf.Duration
	21, // 1: certrail.v1alpha1.AssumeAccessAuditRequest.session_duration:type_name -> google.protobuf.Duration
	12, // 2: certrail.v1alpha1.Envelope.payload:type_name -> certrail.v1alpha1.Payload
	22, // 3: certrail.v1alpha1.Payload.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 4: certrail.v1alpha1.Payload.approve_config:type_name -> certrail.v1alpha1.ApproveConfigPayload
	7,  // 5: certrail.v1alpha1.Payload.issue_certificate:type_name -> certrail.v1alpha1.IssueCertificatePayload
	8,  // 6: certrail.v1alpha1.Payload.revoke_certificate:type_name -> certrail.v1alpha1.RevokeCertificatePayload
	10, // 7: certrail.v1alpha1.Payload.issue_session_credentials:type_name -> certrail.v1alpha1.IssueSessionCredentialsPayload
	3,  // 8: certrail.v1alpha1.Payload.role_access_request:type_name -> certrail.v1alpha1.RoleAccessRequestPayload
	4,  // 9: certrail.v1alpha1.Payload.approved_role_access_request:type_name -> certrail.v1alpha1.ApprovedRoleAccessRequestPayload
	5,  // 10: certrail.v1alpha1.Payload.declined_role_access_request:type_name -> certrail.v1alpha1.DeclinedRoleAccessRequestPayload
	6,  // 11: certrail.v1alpha1.Payload.cancelled_role_access_request:type_name -> certrail.v1alpha1.CancelledRoleAccessRequestPayload
	11, // 12: certrail.v1alpha1.StoreRequest.envelope:type_name -> certrail.v1alpha1.Envelope
	17, // 13: certrail.v1alpha1.GetEntriesResponse.envelopes:type_name -> certrail.v1alpha1.IncludedEnvelope
	11, // 14: certrail.v1alpha1.IncludedEnvelope.envelope:type_name -> certrail.v1alpha1.Envelope
	20, // 15: certrail.v1alpha1.GetLatestSignedLogRootResponse.log_root:type_name -> certrail.v1alpha1.LogRoot
	22, // 16: certrail.v1alpha1.LogRoot.timestamp:type_name -> google.protobuf.Timestamp
	13, // 17: certrail.v1alpha1.CertrailService.Store:input_type -> certrail.v1alpha1.StoreRequest
	15, // 18: certrail.v1alpha1.CertrailService.GetEntries:input_type -> certrail.v1alpha1.GetEntriesRequest
	1,  // 19: certrail.v1alpha1.CertrailService.GetEntryIndexByMerkleHash:input_type -> certrail.v1alpha1.GetEntryIndexByMerkleHashRequest
	18, // 20: certrail.v1alpha1.CertrailService.GetLatestSignedLogRoot:input_type -> certrail.v1alpha1.GetLatestSignedLogRootRequest
	14, // 21: certrail.v1alpha1.CertrailService.Store:output_type -> certrail.v1alpha1.StoreResponse
	16, // 22: certrail.v1alpha1.CertrailService.GetEntries:output_type -> certrail.v1alpha1.GetEntriesResponse
	2,  // 23: certrail.v1alpha1.CertrailService.GetEntryIndexByMerkleHash:output_type -> certrail.v1alpha1.GetEntryIndexByMerkleHashResponse
	19, // 24: certrail.v1alpha1.CertrailService.GetLatestSignedLogRoot:output_type -> certrail.v1alpha1.GetLatestSignedLogRootResponse
	21, // [21:25] is the sub-list for method output_type
	17, // [17:21] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_certrail_v1alpha1_certrail_proto_init() }
func file_certrail_v1alpha1_certrail_proto_init() {
	if File_certrail_v1alpha1_certrail_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_certrail_v1alpha1_certrail_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveConfigPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntryIndexByMerkleHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntryIndexByMerkleHashResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleAccessRequestPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovedRoleAccessRequestPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclinedRoleAccessRequestPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelledRoleAccessRequestPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCertificatePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeCertificatePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssumeAccessAuditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueSessionCredentialsPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Envelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEntriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncludedEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestSignedLogRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestSignedLogRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certrail_v1alpha1_certrail_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_certrail_v1alpha1_certrail_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*Payload_ApproveConfig)(nil),
		(*Payload_IssueCertificate)(nil),
		(*Payload_RevokeCertificate)(nil),
		(*Payload_IssueSessionCredentials)(nil),
		(*Payload_RoleAccessRequest)(nil),
		(*Payload_ApprovedRoleAccessRequest)(nil),
		(*Payload_DeclinedRoleAccessRequest)(nil),
		(*Payload_CancelledRoleAccessRequest)(nil),
	}
	file_certrail_v1alpha1_certrail_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*StoreResponse_RoleAccessRequestId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_certrail_v1alpha1_certrail_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_certrail_v1alpha1_certrail_proto_goTypes,
		DependencyIndexes: file_certrail_v1alpha1_certrail_proto_depIdxs,
		MessageInfos:      file_certrail_v1alpha1_certrail_proto_msgTypes,
	}.Build()
	File_certrail_v1alpha1_certrail_proto = out.File
	file_certrail_v1alpha1_certrail_proto_rawDesc = nil
	file_certrail_v1alpha1_certrail_proto_goTypes = nil
	file_certrail_v1alpha1_certrail_proto_depIdxs = nil
}
