// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: team/v1alpha1/team.proto

package teamv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMembersRequestMultiError, or nil if none found.
func (m *ListMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListMembersRequestMultiError(errors)
	}
	return nil
}

// ListMembersRequestMultiError is an error wrapping multiple validation errors
// returned by ListMembersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMembersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMembersRequestMultiError) AllErrors() []error { return m }

// ListMembersRequestValidationError is the validation error returned by
// ListMembersRequest.Validate if the designated constraints aren't met.
type ListMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMembersRequestValidationError) ErrorName() string {
	return "ListMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMembersRequestValidationError{}

// Validate checks the field values on ListMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMembersResponseMultiError, or nil if none found.
func (m *ListMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMembersResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMembersResponseMultiError(errors)
	}
	return nil
}

// ListMembersResponseMultiError is an error wrapping multiple validation
// errors returned by ListMembersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMembersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMembersResponseMultiError) AllErrors() []error { return m }

// ListMembersResponseValidationError is the validation error returned by
// ListMembersResponse.Validate if the designated constraints aren't met.
type ListMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMembersResponseValidationError) ErrorName() string {
	return "ListMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMembersResponseValidationError{}

// Validate checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Member) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MemberMultiError, or nil if none found.
func (m *Member) ValidateAll() error {
	return m.validate(true)
}

func (m *Member) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EmailAddress

	// no validation rules for IsAdmin

	if len(errors) > 0 {
		return MemberMultiError(errors)
	}
	return nil
}

// MemberMultiError is an error wrapping multiple validation errors returned by
// Member.ValidateAll() if the designated constraints aren't met.
type MemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberMultiError) AllErrors() []error { return m }

// MemberValidationError is the validation error returned by Member.Validate if
// the designated constraints aren't met.
type MemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberValidationError) ErrorName() string { return "MemberValidationError" }

// Error satisfies the builtin error interface
func (e MemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberValidationError{}

// Validate checks the field values on UpdateConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConfigRequestMultiError, or nil if none found.
func (m *UpdateConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConfigRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateConfigRequestMultiError(errors)
	}
	return nil
}

// UpdateConfigRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConfigRequestMultiError) AllErrors() []error { return m }

// UpdateConfigRequestValidationError is the validation error returned by
// UpdateConfigRequest.Validate if the designated constraints aren't met.
type UpdateConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigRequestValidationError) ErrorName() string {
	return "UpdateConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigRequestValidationError{}

// Validate checks the field values on UpdateConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConfigResponseMultiError, or nil if none found.
func (m *UpdateConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sha256Hash

	if len(errors) > 0 {
		return UpdateConfigResponseMultiError(errors)
	}
	return nil
}

// UpdateConfigResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConfigResponseMultiError) AllErrors() []error { return m }

// UpdateConfigResponseValidationError is the validation error returned by
// UpdateConfigResponse.Validate if the designated constraints aren't met.
type UpdateConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigResponseValidationError) ErrorName() string {
	return "UpdateConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigResponseValidationError{}

// Validate checks the field values on GetConfigRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigRequestMultiError, or nil if none found.
func (m *GetConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetConfigRequestMultiError(errors)
	}
	return nil
}

// GetConfigRequestMultiError is an error wrapping multiple validation errors
// returned by GetConfigRequest.ValidateAll() if the designated constraints
// aren't met.
type GetConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigRequestMultiError) AllErrors() []error { return m }

// GetConfigRequestValidationError is the validation error returned by
// GetConfigRequest.Validate if the designated constraints aren't met.
type GetConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigRequestValidationError) ErrorName() string { return "GetConfigRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigRequestValidationError{}

// Validate checks the field values on GetConfigResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigResponseMultiError, or nil if none found.
func (m *GetConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConfigResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConfigResponseMultiError(errors)
	}
	return nil
}

// GetConfigResponseMultiError is an error wrapping multiple validation errors
// returned by GetConfigResponse.ValidateAll() if the designated constraints
// aren't met.
type GetConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigResponseMultiError) AllErrors() []error { return m }

// GetConfigResponseValidationError is the validation error returned by
// GetConfigResponse.Validate if the designated constraints aren't met.
type GetConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigResponseValidationError) ErrorName() string {
	return "GetConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigResponseValidationError{}

// Validate checks the field values on GetConfigByHashRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigByHashRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigByHashRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigByHashRequestMultiError, or nil if none found.
func (m *GetConfigByHashRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigByHashRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sha256Hash

	if len(errors) > 0 {
		return GetConfigByHashRequestMultiError(errors)
	}
	return nil
}

// GetConfigByHashRequestMultiError is an error wrapping multiple validation
// errors returned by GetConfigByHashRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConfigByHashRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigByHashRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigByHashRequestMultiError) AllErrors() []error { return m }

// GetConfigByHashRequestValidationError is the validation error returned by
// GetConfigByHashRequest.Validate if the designated constraints aren't met.
type GetConfigByHashRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigByHashRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigByHashRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigByHashRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigByHashRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigByHashRequestValidationError) ErrorName() string {
	return "GetConfigByHashRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigByHashRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigByHashRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigByHashRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigByHashRequestValidationError{}

// Validate checks the field values on GetConfigByHashResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigByHashResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigByHashResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigByHashResponseMultiError, or nil if none found.
func (m *GetConfigByHashResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigByHashResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConfigByHashResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConfigByHashResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConfigByHashResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConfigByHashResponseMultiError(errors)
	}
	return nil
}

// GetConfigByHashResponseMultiError is an error wrapping multiple validation
// errors returned by GetConfigByHashResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConfigByHashResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigByHashResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigByHashResponseMultiError) AllErrors() []error { return m }

// GetConfigByHashResponseValidationError is the validation error returned by
// GetConfigByHashResponse.Validate if the designated constraints aren't met.
type GetConfigByHashResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigByHashResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigByHashResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigByHashResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigByHashResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigByHashResponseValidationError) ErrorName() string {
	return "GetConfigByHashResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigByHashResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigByHashResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigByHashResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigByHashResponseValidationError{}

// Validate checks the field values on EnrolAWSProviderIntervention with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnrolAWSProviderIntervention) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnrolAWSProviderIntervention with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnrolAWSProviderInterventionMultiError, or nil if none found.
func (m *EnrolAWSProviderIntervention) ValidateAll() error {
	return m.validate(true)
}

func (m *EnrolAWSProviderIntervention) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProviderId

	// no validation rules for AwsAccountId

	// no validation rules for CloudformationUrl

	if len(errors) > 0 {
		return EnrolAWSProviderInterventionMultiError(errors)
	}
	return nil
}

// EnrolAWSProviderInterventionMultiError is an error wrapping multiple
// validation errors returned by EnrolAWSProviderIntervention.ValidateAll() if
// the designated constraints aren't met.
type EnrolAWSProviderInterventionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnrolAWSProviderInterventionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnrolAWSProviderInterventionMultiError) AllErrors() []error { return m }

// EnrolAWSProviderInterventionValidationError is the validation error returned
// by EnrolAWSProviderIntervention.Validate if the designated constraints
// aren't met.
type EnrolAWSProviderInterventionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrolAWSProviderInterventionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrolAWSProviderInterventionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrolAWSProviderInterventionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrolAWSProviderInterventionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrolAWSProviderInterventionValidationError) ErrorName() string {
	return "EnrolAWSProviderInterventionValidationError"
}

// Error satisfies the builtin error interface
func (e EnrolAWSProviderInterventionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrolAWSProviderIntervention.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrolAWSProviderInterventionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrolAWSProviderInterventionValidationError{}

// Validate checks the field values on GetInterventionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInterventionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInterventionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInterventionsRequestMultiError, or nil if none found.
func (m *GetInterventionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInterventionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetInterventionsRequestMultiError(errors)
	}
	return nil
}

// GetInterventionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetInterventionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetInterventionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInterventionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInterventionsRequestMultiError) AllErrors() []error { return m }

// GetInterventionsRequestValidationError is the validation error returned by
// GetInterventionsRequest.Validate if the designated constraints aren't met.
type GetInterventionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInterventionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInterventionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInterventionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInterventionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInterventionsRequestValidationError) ErrorName() string {
	return "GetInterventionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInterventionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInterventionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInterventionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInterventionsRequestValidationError{}

// Validate checks the field values on Intervention with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Intervention) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Intervention with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InterventionMultiError, or
// nil if none found.
func (m *Intervention) ValidateAll() error {
	return m.validate(true)
}

func (m *Intervention) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Data.(type) {

	case *Intervention_EnrolAwsProvider:

		if all {
			switch v := interface{}(m.GetEnrolAwsProvider()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InterventionValidationError{
						field:  "EnrolAwsProvider",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InterventionValidationError{
						field:  "EnrolAwsProvider",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnrolAwsProvider()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InterventionValidationError{
					field:  "EnrolAwsProvider",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InterventionMultiError(errors)
	}
	return nil
}

// InterventionMultiError is an error wrapping multiple validation errors
// returned by Intervention.ValidateAll() if the designated constraints aren't met.
type InterventionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterventionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterventionMultiError) AllErrors() []error { return m }

// InterventionValidationError is the validation error returned by
// Intervention.Validate if the designated constraints aren't met.
type InterventionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterventionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterventionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterventionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterventionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterventionValidationError) ErrorName() string { return "InterventionValidationError" }

// Error satisfies the builtin error interface
func (e InterventionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervention.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterventionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterventionValidationError{}

// Validate checks the field values on GetInterventionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInterventionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInterventionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInterventionsResponseMultiError, or nil if none found.
func (m *GetInterventionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInterventionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInterventions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetInterventionsResponseValidationError{
						field:  fmt.Sprintf("Interventions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetInterventionsResponseValidationError{
						field:  fmt.Sprintf("Interventions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetInterventionsResponseValidationError{
					field:  fmt.Sprintf("Interventions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetInterventionsResponseMultiError(errors)
	}
	return nil
}

// GetInterventionsResponseMultiError is an error wrapping multiple validation
// errors returned by GetInterventionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetInterventionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInterventionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInterventionsResponseMultiError) AllErrors() []error { return m }

// GetInterventionsResponseValidationError is the validation error returned by
// GetInterventionsResponse.Validate if the designated constraints aren't met.
type GetInterventionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInterventionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInterventionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInterventionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInterventionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInterventionsResponseValidationError) ErrorName() string {
	return "GetInterventionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetInterventionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInterventionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInterventionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInterventionsResponseValidationError{}

// Validate checks the field values on EnrolProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnrolProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnrolProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnrolProviderRequestMultiError, or nil if none found.
func (m *EnrolProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnrolProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	switch m.Provider.(type) {

	case *EnrolProviderRequest_Aws:

		if all {
			switch v := interface{}(m.GetAws()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnrolProviderRequestValidationError{
						field:  "Aws",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnrolProviderRequestValidationError{
						field:  "Aws",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAws()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnrolProviderRequestValidationError{
					field:  "Aws",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EnrolProviderRequestMultiError(errors)
	}
	return nil
}

// EnrolProviderRequestMultiError is an error wrapping multiple validation
// errors returned by EnrolProviderRequest.ValidateAll() if the designated
// constraints aren't met.
type EnrolProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnrolProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnrolProviderRequestMultiError) AllErrors() []error { return m }

// EnrolProviderRequestValidationError is the validation error returned by
// EnrolProviderRequest.Validate if the designated constraints aren't met.
type EnrolProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrolProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrolProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrolProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrolProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrolProviderRequestValidationError) ErrorName() string {
	return "EnrolProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnrolProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrolProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrolProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrolProviderRequestValidationError{}

// Validate checks the field values on EnrolAWSProvider with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EnrolAWSProvider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnrolAWSProvider with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnrolAWSProviderMultiError, or nil if none found.
func (m *EnrolAWSProvider) ValidateAll() error {
	return m.validate(true)
}

func (m *EnrolAWSProvider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return EnrolAWSProviderMultiError(errors)
	}
	return nil
}

// EnrolAWSProviderMultiError is an error wrapping multiple validation errors
// returned by EnrolAWSProvider.ValidateAll() if the designated constraints
// aren't met.
type EnrolAWSProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnrolAWSProviderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnrolAWSProviderMultiError) AllErrors() []error { return m }

// EnrolAWSProviderValidationError is the validation error returned by
// EnrolAWSProvider.Validate if the designated constraints aren't met.
type EnrolAWSProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrolAWSProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrolAWSProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrolAWSProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrolAWSProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrolAWSProviderValidationError) ErrorName() string { return "EnrolAWSProviderValidationError" }

// Error satisfies the builtin error interface
func (e EnrolAWSProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrolAWSProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrolAWSProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrolAWSProviderValidationError{}

// Validate checks the field values on EnrolProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnrolProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnrolProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnrolProviderResponseMultiError, or nil if none found.
func (m *EnrolProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnrolProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for DeploymentUrl

	// no validation rules for EnrollmentToken

	if len(errors) > 0 {
		return EnrolProviderResponseMultiError(errors)
	}
	return nil
}

// EnrolProviderResponseMultiError is an error wrapping multiple validation
// errors returned by EnrolProviderResponse.ValidateAll() if the designated
// constraints aren't met.
type EnrolProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnrolProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnrolProviderResponseMultiError) AllErrors() []error { return m }

// EnrolProviderResponseValidationError is the validation error returned by
// EnrolProviderResponse.Validate if the designated constraints aren't met.
type EnrolProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrolProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrolProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrolProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrolProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrolProviderResponseValidationError) ErrorName() string {
	return "EnrolProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnrolProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrolProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrolProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrolProviderResponseValidationError{}
