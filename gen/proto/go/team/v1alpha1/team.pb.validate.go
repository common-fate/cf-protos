// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: team/v1alpha1/team.proto

package teamv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListRoleAccessRequestsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleAccessRequestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleAccessRequestsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListRoleAccessRequestsRequestMultiError, or nil if none found.
func (m *ListRoleAccessRequestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleAccessRequestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IncludeExpired

	if len(errors) > 0 {
		return ListRoleAccessRequestsRequestMultiError(errors)
	}
	return nil
}

// ListRoleAccessRequestsRequestMultiError is an error wrapping multiple
// validation errors returned by ListRoleAccessRequestsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListRoleAccessRequestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleAccessRequestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleAccessRequestsRequestMultiError) AllErrors() []error { return m }

// ListRoleAccessRequestsRequestValidationError is the validation error
// returned by ListRoleAccessRequestsRequest.Validate if the designated
// constraints aren't met.
type ListRoleAccessRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleAccessRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleAccessRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleAccessRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleAccessRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleAccessRequestsRequestValidationError) ErrorName() string {
	return "ListRoleAccessRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleAccessRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleAccessRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleAccessRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleAccessRequestsRequestValidationError{}

// Validate checks the field values on ListRoleAccessRequestsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleAccessRequestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleAccessRequestsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListRoleAccessRequestsResponseMultiError, or nil if none found.
func (m *ListRoleAccessRequestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleAccessRequestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRoleAccessRequestsResponseValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRoleAccessRequestsResponseValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoleAccessRequestsResponseValidationError{
					field:  fmt.Sprintf("Requests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRoleAccessRequestsResponseMultiError(errors)
	}
	return nil
}

// ListRoleAccessRequestsResponseMultiError is an error wrapping multiple
// validation errors returned by ListRoleAccessRequestsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListRoleAccessRequestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleAccessRequestsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleAccessRequestsResponseMultiError) AllErrors() []error { return m }

// ListRoleAccessRequestsResponseValidationError is the validation error
// returned by ListRoleAccessRequestsResponse.Validate if the designated
// constraints aren't met.
type ListRoleAccessRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleAccessRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleAccessRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleAccessRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleAccessRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleAccessRequestsResponseValidationError) ErrorName() string {
	return "ListRoleAccessRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleAccessRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleAccessRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleAccessRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleAccessRequestsResponseValidationError{}

// Validate checks the field values on RoleAccessRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleAccessRequestMultiError, or nil if none found.
func (m *RoleAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleAccessRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleAccessRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleAccessRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleAccessRequestValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleAccessRequestValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleAccessRequestValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for TrillianMerkleHash

	// no validation rules for ProvisionStrategy

	// no validation rules for ExpiryDuration

	if len(errors) > 0 {
		return RoleAccessRequestMultiError(errors)
	}
	return nil
}

// RoleAccessRequestMultiError is an error wrapping multiple validation errors
// returned by RoleAccessRequest.ValidateAll() if the designated constraints
// aren't met.
type RoleAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleAccessRequestMultiError) AllErrors() []error { return m }

// RoleAccessRequestValidationError is the validation error returned by
// RoleAccessRequest.Validate if the designated constraints aren't met.
type RoleAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleAccessRequestValidationError) ErrorName() string {
	return "RoleAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoleAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleAccessRequestValidationError{}

// Validate checks the field values on ListMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMembersRequestMultiError, or nil if none found.
func (m *ListMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListMembersRequestMultiError(errors)
	}
	return nil
}

// ListMembersRequestMultiError is an error wrapping multiple validation errors
// returned by ListMembersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMembersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMembersRequestMultiError) AllErrors() []error { return m }

// ListMembersRequestValidationError is the validation error returned by
// ListMembersRequest.Validate if the designated constraints aren't met.
type ListMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMembersRequestValidationError) ErrorName() string {
	return "ListMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMembersRequestValidationError{}

// Validate checks the field values on ListMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMembersResponseMultiError, or nil if none found.
func (m *ListMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMembersResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMembersResponseMultiError(errors)
	}
	return nil
}

// ListMembersResponseMultiError is an error wrapping multiple validation
// errors returned by ListMembersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMembersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMembersResponseMultiError) AllErrors() []error { return m }

// ListMembersResponseValidationError is the validation error returned by
// ListMembersResponse.Validate if the designated constraints aren't met.
type ListMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMembersResponseValidationError) ErrorName() string {
	return "ListMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMembersResponseValidationError{}

// Validate checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Account) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AccountMultiError, or nil if none found.
func (m *Account) ValidateAll() error {
	return m.validate(true)
}

func (m *Account) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProviderId

	// no validation rules for AccountId

	// no validation rules for Alias

	if len(errors) > 0 {
		return AccountMultiError(errors)
	}
	return nil
}

// AccountMultiError is an error wrapping multiple validation errors returned
// by Account.ValidateAll() if the designated constraints aren't met.
type AccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountMultiError) AllErrors() []error { return m }

// AccountValidationError is the validation error returned by Account.Validate
// if the designated constraints aren't met.
type AccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountValidationError) ErrorName() string { return "AccountValidationError" }

// Error satisfies the builtin error interface
func (e AccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountValidationError{}

// Validate checks the field values on UpdateAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountsRequestMultiError, or nil if none found.
func (m *UpdateAccountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAccountsRequestValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAccountsRequestValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAccountsRequestValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateAccountsRequestMultiError(errors)
	}
	return nil
}

// UpdateAccountsRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAccountsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountsRequestMultiError) AllErrors() []error { return m }

// UpdateAccountsRequestValidationError is the validation error returned by
// UpdateAccountsRequest.Validate if the designated constraints aren't met.
type UpdateAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountsRequestValidationError) ErrorName() string {
	return "UpdateAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountsRequestValidationError{}

// Validate checks the field values on UpdateAccountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountsResponseMultiError, or nil if none found.
func (m *UpdateAccountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAccountsResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAccountsResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAccountsResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateAccountsResponseMultiError(errors)
	}
	return nil
}

// UpdateAccountsResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAccountsResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountsResponseMultiError) AllErrors() []error { return m }

// UpdateAccountsResponseValidationError is the validation error returned by
// UpdateAccountsResponse.Validate if the designated constraints aren't met.
type UpdateAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountsResponseValidationError) ErrorName() string {
	return "UpdateAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountsResponseValidationError{}

// Validate checks the field values on ListRolesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRolesRequestMultiError, or nil if none found.
func (m *ListRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListRolesRequestMultiError(errors)
	}
	return nil
}

// ListRolesRequestMultiError is an error wrapping multiple validation errors
// returned by ListRolesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolesRequestMultiError) AllErrors() []error { return m }

// ListRolesRequestValidationError is the validation error returned by
// ListRolesRequest.Validate if the designated constraints aren't met.
type ListRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesRequestValidationError) ErrorName() string { return "ListRolesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesRequestValidationError{}

// Validate checks the field values on ListRolesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRolesResponseMultiError, or nil if none found.
func (m *ListRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRolesResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRolesResponseMultiError(errors)
	}
	return nil
}

// ListRolesResponseMultiError is an error wrapping multiple validation errors
// returned by ListRolesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolesResponseMultiError) AllErrors() []error { return m }

// ListRolesResponseValidationError is the validation error returned by
// ListRolesResponse.Validate if the designated constraints aren't met.
type ListRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesResponseValidationError) ErrorName() string {
	return "ListRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesResponseValidationError{}

// Validate checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Member) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MemberMultiError, or nil if none found.
func (m *Member) ValidateAll() error {
	return m.validate(true)
}

func (m *Member) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EmailAddress

	// no validation rules for IsAdmin

	if len(errors) > 0 {
		return MemberMultiError(errors)
	}
	return nil
}

// MemberMultiError is an error wrapping multiple validation errors returned by
// Member.ValidateAll() if the designated constraints aren't met.
type MemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberMultiError) AllErrors() []error { return m }

// MemberValidationError is the validation error returned by Member.Validate if
// the designated constraints aren't met.
type MemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberValidationError) ErrorName() string { return "MemberValidationError" }

// Error satisfies the builtin error interface
func (e MemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberValidationError{}

// Validate checks the field values on IsAdminUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsAdminUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAdminUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsAdminUserRequestMultiError, or nil if none found.
func (m *IsAdminUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAdminUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IsAdminUserRequestMultiError(errors)
	}
	return nil
}

// IsAdminUserRequestMultiError is an error wrapping multiple validation errors
// returned by IsAdminUserRequest.ValidateAll() if the designated constraints
// aren't met.
type IsAdminUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAdminUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAdminUserRequestMultiError) AllErrors() []error { return m }

// IsAdminUserRequestValidationError is the validation error returned by
// IsAdminUserRequest.Validate if the designated constraints aren't met.
type IsAdminUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAdminUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAdminUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAdminUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAdminUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAdminUserRequestValidationError) ErrorName() string {
	return "IsAdminUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsAdminUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAdminUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAdminUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAdminUserRequestValidationError{}

// Validate checks the field values on IsAdminUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsAdminUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAdminUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsAdminUserResponseMultiError, or nil if none found.
func (m *IsAdminUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAdminUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAdmin

	if len(errors) > 0 {
		return IsAdminUserResponseMultiError(errors)
	}
	return nil
}

// IsAdminUserResponseMultiError is an error wrapping multiple validation
// errors returned by IsAdminUserResponse.ValidateAll() if the designated
// constraints aren't met.
type IsAdminUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAdminUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAdminUserResponseMultiError) AllErrors() []error { return m }

// IsAdminUserResponseValidationError is the validation error returned by
// IsAdminUserResponse.Validate if the designated constraints aren't met.
type IsAdminUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAdminUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAdminUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAdminUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAdminUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAdminUserResponseValidationError) ErrorName() string {
	return "IsAdminUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsAdminUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAdminUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAdminUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAdminUserResponseValidationError{}

// Validate checks the field values on UpdateConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConfigRequestMultiError, or nil if none found.
func (m *UpdateConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConfigRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateConfigRequestMultiError(errors)
	}
	return nil
}

// UpdateConfigRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConfigRequestMultiError) AllErrors() []error { return m }

// UpdateConfigRequestValidationError is the validation error returned by
// UpdateConfigRequest.Validate if the designated constraints aren't met.
type UpdateConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigRequestValidationError) ErrorName() string {
	return "UpdateConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigRequestValidationError{}

// Validate checks the field values on UpdateConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConfigResponseMultiError, or nil if none found.
func (m *UpdateConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sha256Hash

	if len(errors) > 0 {
		return UpdateConfigResponseMultiError(errors)
	}
	return nil
}

// UpdateConfigResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConfigResponseMultiError) AllErrors() []error { return m }

// UpdateConfigResponseValidationError is the validation error returned by
// UpdateConfigResponse.Validate if the designated constraints aren't met.
type UpdateConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigResponseValidationError) ErrorName() string {
	return "UpdateConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigResponseValidationError{}

// Validate checks the field values on EnrolProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnrolProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnrolProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnrolProviderRequestMultiError, or nil if none found.
func (m *EnrolProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnrolProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	switch m.Provider.(type) {

	case *EnrolProviderRequest_Aws:

		if all {
			switch v := interface{}(m.GetAws()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnrolProviderRequestValidationError{
						field:  "Aws",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnrolProviderRequestValidationError{
						field:  "Aws",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAws()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnrolProviderRequestValidationError{
					field:  "Aws",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnrolProviderRequest_AwsSso:

		if all {
			switch v := interface{}(m.GetAwsSso()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnrolProviderRequestValidationError{
						field:  "AwsSso",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnrolProviderRequestValidationError{
						field:  "AwsSso",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsSso()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnrolProviderRequestValidationError{
					field:  "AwsSso",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnrolProviderRequest_Okta:

		if all {
			switch v := interface{}(m.GetOkta()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnrolProviderRequestValidationError{
						field:  "Okta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnrolProviderRequestValidationError{
						field:  "Okta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOkta()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnrolProviderRequestValidationError{
					field:  "Okta",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EnrolProviderRequestMultiError(errors)
	}
	return nil
}

// EnrolProviderRequestMultiError is an error wrapping multiple validation
// errors returned by EnrolProviderRequest.ValidateAll() if the designated
// constraints aren't met.
type EnrolProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnrolProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnrolProviderRequestMultiError) AllErrors() []error { return m }

// EnrolProviderRequestValidationError is the validation error returned by
// EnrolProviderRequest.Validate if the designated constraints aren't met.
type EnrolProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrolProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrolProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrolProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrolProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrolProviderRequestValidationError) ErrorName() string {
	return "EnrolProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnrolProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrolProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrolProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrolProviderRequestValidationError{}

// Validate checks the field values on EnrolAWSProvider with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EnrolAWSProvider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnrolAWSProvider with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnrolAWSProviderMultiError, or nil if none found.
func (m *EnrolAWSProvider) ValidateAll() error {
	return m.validate(true)
}

func (m *EnrolAWSProvider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccountId()) != 12 {
		err := EnrolAWSProviderValidationError{
			field:  "AccountId",
			reason: "value length must be 12 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if !_EnrolAWSProvider_AccountId_Pattern.MatchString(m.GetAccountId()) {
		err := EnrolAWSProviderValidationError{
			field:  "AccountId",
			reason: "value does not match regex pattern \"^[0-9]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EnrolAWSProviderMultiError(errors)
	}
	return nil
}

// EnrolAWSProviderMultiError is an error wrapping multiple validation errors
// returned by EnrolAWSProvider.ValidateAll() if the designated constraints
// aren't met.
type EnrolAWSProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnrolAWSProviderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnrolAWSProviderMultiError) AllErrors() []error { return m }

// EnrolAWSProviderValidationError is the validation error returned by
// EnrolAWSProvider.Validate if the designated constraints aren't met.
type EnrolAWSProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrolAWSProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrolAWSProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrolAWSProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrolAWSProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrolAWSProviderValidationError) ErrorName() string { return "EnrolAWSProviderValidationError" }

// Error satisfies the builtin error interface
func (e EnrolAWSProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrolAWSProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrolAWSProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrolAWSProviderValidationError{}

var _EnrolAWSProvider_AccountId_Pattern = regexp.MustCompile("^[0-9]*$")

// Validate checks the field values on EnrolAWSSSOProvider with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnrolAWSSSOProvider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnrolAWSSSOProvider with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnrolAWSSSOProviderMultiError, or nil if none found.
func (m *EnrolAWSSSOProvider) ValidateAll() error {
	return m.validate(true)
}

func (m *EnrolAWSSSOProvider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccountId()) != 12 {
		err := EnrolAWSSSOProviderValidationError{
			field:  "AccountId",
			reason: "value length must be 12 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if !_EnrolAWSSSOProvider_AccountId_Pattern.MatchString(m.GetAccountId()) {
		err := EnrolAWSSSOProviderValidationError{
			field:  "AccountId",
			reason: "value does not match regex pattern \"^[0-9]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EnrolAWSSSOProviderMultiError(errors)
	}
	return nil
}

// EnrolAWSSSOProviderMultiError is an error wrapping multiple validation
// errors returned by EnrolAWSSSOProvider.ValidateAll() if the designated
// constraints aren't met.
type EnrolAWSSSOProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnrolAWSSSOProviderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnrolAWSSSOProviderMultiError) AllErrors() []error { return m }

// EnrolAWSSSOProviderValidationError is the validation error returned by
// EnrolAWSSSOProvider.Validate if the designated constraints aren't met.
type EnrolAWSSSOProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrolAWSSSOProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrolAWSSSOProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrolAWSSSOProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrolAWSSSOProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrolAWSSSOProviderValidationError) ErrorName() string {
	return "EnrolAWSSSOProviderValidationError"
}

// Error satisfies the builtin error interface
func (e EnrolAWSSSOProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrolAWSSSOProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrolAWSSSOProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrolAWSSSOProviderValidationError{}

var _EnrolAWSSSOProvider_AccountId_Pattern = regexp.MustCompile("^[0-9]*$")

// Validate checks the field values on EnrolOktaProvider with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EnrolOktaProvider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnrolOktaProvider with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnrolOktaProviderMultiError, or nil if none found.
func (m *EnrolOktaProvider) ValidateAll() error {
	return m.validate(true)
}

func (m *EnrolOktaProvider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnrolOktaProviderMultiError(errors)
	}
	return nil
}

// EnrolOktaProviderMultiError is an error wrapping multiple validation errors
// returned by EnrolOktaProvider.ValidateAll() if the designated constraints
// aren't met.
type EnrolOktaProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnrolOktaProviderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnrolOktaProviderMultiError) AllErrors() []error { return m }

// EnrolOktaProviderValidationError is the validation error returned by
// EnrolOktaProvider.Validate if the designated constraints aren't met.
type EnrolOktaProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrolOktaProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrolOktaProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrolOktaProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrolOktaProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrolOktaProviderValidationError) ErrorName() string {
	return "EnrolOktaProviderValidationError"
}

// Error satisfies the builtin error interface
func (e EnrolOktaProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrolOktaProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrolOktaProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrolOktaProviderValidationError{}

// Validate checks the field values on EnrolProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnrolProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnrolProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnrolProviderResponseMultiError, or nil if none found.
func (m *EnrolProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnrolProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentUrl

	if all {
		switch v := interface{}(m.GetExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EnrolProviderResponseValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EnrolProviderResponseValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnrolProviderResponseValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EnrolProviderResponseMultiError(errors)
	}
	return nil
}

// EnrolProviderResponseMultiError is an error wrapping multiple validation
// errors returned by EnrolProviderResponse.ValidateAll() if the designated
// constraints aren't met.
type EnrolProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnrolProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnrolProviderResponseMultiError) AllErrors() []error { return m }

// EnrolProviderResponseValidationError is the validation error returned by
// EnrolProviderResponse.Validate if the designated constraints aren't met.
type EnrolProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrolProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrolProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrolProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrolProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrolProviderResponseValidationError) ErrorName() string {
	return "EnrolProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnrolProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrolProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrolProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrolProviderResponseValidationError{}

// Validate checks the field values on ListProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProvidersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProvidersRequestMultiError, or nil if none found.
func (m *ListProvidersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProvidersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListProvidersRequestMultiError(errors)
	}
	return nil
}

// ListProvidersRequestMultiError is an error wrapping multiple validation
// errors returned by ListProvidersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProvidersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProvidersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProvidersRequestMultiError) AllErrors() []error { return m }

// ListProvidersRequestValidationError is the validation error returned by
// ListProvidersRequest.Validate if the designated constraints aren't met.
type ListProvidersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersRequestValidationError) ErrorName() string {
	return "ListProvidersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersRequestValidationError{}

// Validate checks the field values on ListProvidersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProvidersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProvidersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProvidersResponseMultiError, or nil if none found.
func (m *ListProvidersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProvidersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProvidersResponseValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PendingEnrollmentsCount

	if len(errors) > 0 {
		return ListProvidersResponseMultiError(errors)
	}
	return nil
}

// ListProvidersResponseMultiError is an error wrapping multiple validation
// errors returned by ListProvidersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProvidersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProvidersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProvidersResponseMultiError) AllErrors() []error { return m }

// ListProvidersResponseValidationError is the validation error returned by
// ListProvidersResponse.Validate if the designated constraints aren't met.
type ListProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersResponseValidationError) ErrorName() string {
	return "ListProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersResponseValidationError{}

// Validate checks the field values on GetStatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatusRequestMultiError, or nil if none found.
func (m *GetStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetStatusRequestMultiError(errors)
	}
	return nil
}

// GetStatusRequestMultiError is an error wrapping multiple validation errors
// returned by GetStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusRequestMultiError) AllErrors() []error { return m }

// GetStatusRequestValidationError is the validation error returned by
// GetStatusRequest.Validate if the designated constraints aren't met.
type GetStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusRequestValidationError) ErrorName() string { return "GetStatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusRequestValidationError{}

// Validate checks the field values on GetStatusResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatusResponseMultiError, or nil if none found.
func (m *GetStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEnrollments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStatusResponseValidationError{
						field:  fmt.Sprintf("Enrollments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStatusResponseValidationError{
						field:  fmt.Sprintf("Enrollments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStatusResponseValidationError{
					field:  fmt.Sprintf("Enrollments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetExpiredEnrollments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStatusResponseValidationError{
						field:  fmt.Sprintf("ExpiredEnrollments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStatusResponseValidationError{
						field:  fmt.Sprintf("ExpiredEnrollments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStatusResponseValidationError{
					field:  fmt.Sprintf("ExpiredEnrollments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetStatusResponseMultiError(errors)
	}
	return nil
}

// GetStatusResponseMultiError is an error wrapping multiple validation errors
// returned by GetStatusResponse.ValidateAll() if the designated constraints
// aren't met.
type GetStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusResponseMultiError) AllErrors() []error { return m }

// GetStatusResponseValidationError is the validation error returned by
// GetStatusResponse.Validate if the designated constraints aren't met.
type GetStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusResponseValidationError) ErrorName() string {
	return "GetStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusResponseValidationError{}

// Validate checks the field values on ProviderEnrollment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProviderEnrollment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProviderEnrollment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProviderEnrollmentMultiError, or nil if none found.
func (m *ProviderEnrollment) ValidateAll() error {
	return m.validate(true)
}

func (m *ProviderEnrollment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for DeploymentUrl

	// no validation rules for EnrollmentToken

	if all {
		switch v := interface{}(m.GetExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProviderEnrollmentValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProviderEnrollmentValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProviderEnrollmentValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Details.(type) {

	case *ProviderEnrollment_Aws:

		if all {
			switch v := interface{}(m.GetAws()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProviderEnrollmentValidationError{
						field:  "Aws",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProviderEnrollmentValidationError{
						field:  "Aws",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAws()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderEnrollmentValidationError{
					field:  "Aws",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ProviderEnrollment_Awssso:

		if all {
			switch v := interface{}(m.GetAwssso()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProviderEnrollmentValidationError{
						field:  "Awssso",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProviderEnrollmentValidationError{
						field:  "Awssso",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwssso()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderEnrollmentValidationError{
					field:  "Awssso",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ProviderEnrollment_Okta:

		if all {
			switch v := interface{}(m.GetOkta()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProviderEnrollmentValidationError{
						field:  "Okta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProviderEnrollmentValidationError{
						field:  "Okta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOkta()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderEnrollmentValidationError{
					field:  "Okta",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProviderEnrollmentMultiError(errors)
	}
	return nil
}

// ProviderEnrollmentMultiError is an error wrapping multiple validation errors
// returned by ProviderEnrollment.ValidateAll() if the designated constraints
// aren't met.
type ProviderEnrollmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProviderEnrollmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProviderEnrollmentMultiError) AllErrors() []error { return m }

// ProviderEnrollmentValidationError is the validation error returned by
// ProviderEnrollment.Validate if the designated constraints aren't met.
type ProviderEnrollmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderEnrollmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderEnrollmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderEnrollmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderEnrollmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderEnrollmentValidationError) ErrorName() string {
	return "ProviderEnrollmentValidationError"
}

// Error satisfies the builtin error interface
func (e ProviderEnrollmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProviderEnrollment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderEnrollmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderEnrollmentValidationError{}

// Validate checks the field values on AWSProviderEnrollment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AWSProviderEnrollment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AWSProviderEnrollment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AWSProviderEnrollmentMultiError, or nil if none found.
func (m *AWSProviderEnrollment) ValidateAll() error {
	return m.validate(true)
}

func (m *AWSProviderEnrollment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return AWSProviderEnrollmentMultiError(errors)
	}
	return nil
}

// AWSProviderEnrollmentMultiError is an error wrapping multiple validation
// errors returned by AWSProviderEnrollment.ValidateAll() if the designated
// constraints aren't met.
type AWSProviderEnrollmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AWSProviderEnrollmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AWSProviderEnrollmentMultiError) AllErrors() []error { return m }

// AWSProviderEnrollmentValidationError is the validation error returned by
// AWSProviderEnrollment.Validate if the designated constraints aren't met.
type AWSProviderEnrollmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AWSProviderEnrollmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AWSProviderEnrollmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AWSProviderEnrollmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AWSProviderEnrollmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AWSProviderEnrollmentValidationError) ErrorName() string {
	return "AWSProviderEnrollmentValidationError"
}

// Error satisfies the builtin error interface
func (e AWSProviderEnrollmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAWSProviderEnrollment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AWSProviderEnrollmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AWSProviderEnrollmentValidationError{}

// Validate checks the field values on AWSSSOProviderEnrollment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AWSSSOProviderEnrollment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AWSSSOProviderEnrollment with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AWSSSOProviderEnrollmentMultiError, or nil if none found.
func (m *AWSSSOProviderEnrollment) ValidateAll() error {
	return m.validate(true)
}

func (m *AWSSSOProviderEnrollment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return AWSSSOProviderEnrollmentMultiError(errors)
	}
	return nil
}

// AWSSSOProviderEnrollmentMultiError is an error wrapping multiple validation
// errors returned by AWSSSOProviderEnrollment.ValidateAll() if the designated
// constraints aren't met.
type AWSSSOProviderEnrollmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AWSSSOProviderEnrollmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AWSSSOProviderEnrollmentMultiError) AllErrors() []error { return m }

// AWSSSOProviderEnrollmentValidationError is the validation error returned by
// AWSSSOProviderEnrollment.Validate if the designated constraints aren't met.
type AWSSSOProviderEnrollmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AWSSSOProviderEnrollmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AWSSSOProviderEnrollmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AWSSSOProviderEnrollmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AWSSSOProviderEnrollmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AWSSSOProviderEnrollmentValidationError) ErrorName() string {
	return "AWSSSOProviderEnrollmentValidationError"
}

// Error satisfies the builtin error interface
func (e AWSSSOProviderEnrollmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAWSSSOProviderEnrollment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AWSSSOProviderEnrollmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AWSSSOProviderEnrollmentValidationError{}

// Validate checks the field values on OktaProviderEnrollment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OktaProviderEnrollment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OktaProviderEnrollment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OktaProviderEnrollmentMultiError, or nil if none found.
func (m *OktaProviderEnrollment) ValidateAll() error {
	return m.validate(true)
}

func (m *OktaProviderEnrollment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return OktaProviderEnrollmentMultiError(errors)
	}
	return nil
}

// OktaProviderEnrollmentMultiError is an error wrapping multiple validation
// errors returned by OktaProviderEnrollment.ValidateAll() if the designated
// constraints aren't met.
type OktaProviderEnrollmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OktaProviderEnrollmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OktaProviderEnrollmentMultiError) AllErrors() []error { return m }

// OktaProviderEnrollmentValidationError is the validation error returned by
// OktaProviderEnrollment.Validate if the designated constraints aren't met.
type OktaProviderEnrollmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OktaProviderEnrollmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OktaProviderEnrollmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OktaProviderEnrollmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OktaProviderEnrollmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OktaProviderEnrollmentValidationError) ErrorName() string {
	return "OktaProviderEnrollmentValidationError"
}

// Error satisfies the builtin error interface
func (e OktaProviderEnrollmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOktaProviderEnrollment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OktaProviderEnrollmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OktaProviderEnrollmentValidationError{}

// Validate checks the field values on DeleteProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProviderRequestMultiError, or nil if none found.
func (m *DeleteProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProviderRequestMultiError(errors)
	}
	return nil
}

// DeleteProviderRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProviderRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProviderRequestMultiError) AllErrors() []error { return m }

// DeleteProviderRequestValidationError is the validation error returned by
// DeleteProviderRequest.Validate if the designated constraints aren't met.
type DeleteProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProviderRequestValidationError) ErrorName() string {
	return "DeleteProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProviderRequestValidationError{}

// Validate checks the field values on DeleteProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProviderResponseMultiError, or nil if none found.
func (m *DeleteProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProviderResponseMultiError(errors)
	}
	return nil
}

// DeleteProviderResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteProviderResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProviderResponseMultiError) AllErrors() []error { return m }

// DeleteProviderResponseValidationError is the validation error returned by
// DeleteProviderResponse.Validate if the designated constraints aren't met.
type DeleteProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProviderResponseValidationError) ErrorName() string {
	return "DeleteProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProviderResponseValidationError{}

// Validate checks the field values on GetProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProviderRequestMultiError, or nil if none found.
func (m *GetProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProviderRequestMultiError(errors)
	}
	return nil
}

// GetProviderRequestMultiError is an error wrapping multiple validation errors
// returned by GetProviderRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProviderRequestMultiError) AllErrors() []error { return m }

// GetProviderRequestValidationError is the validation error returned by
// GetProviderRequest.Validate if the designated constraints aren't met.
type GetProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProviderRequestValidationError) ErrorName() string {
	return "GetProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProviderRequestValidationError{}

// Validate checks the field values on GetProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProviderResponseMultiError, or nil if none found.
func (m *GetProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProviderResponseValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProviderResponseValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProviderResponseValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProviderResponseMultiError(errors)
	}
	return nil
}

// GetProviderResponseMultiError is an error wrapping multiple validation
// errors returned by GetProviderResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProviderResponseMultiError) AllErrors() []error { return m }

// GetProviderResponseValidationError is the validation error returned by
// GetProviderResponse.Validate if the designated constraints aren't met.
type GetProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProviderResponseValidationError) ErrorName() string {
	return "GetProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProviderResponseValidationError{}

// Validate checks the field values on Provider with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Provider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Provider with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProviderMultiError, or nil
// if none found.
func (m *Provider) ValidateAll() error {
	return m.validate(true)
}

func (m *Provider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Status

	switch m.Details.(type) {

	case *Provider_Aws:

		if all {
			switch v := interface{}(m.GetAws()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProviderValidationError{
						field:  "Aws",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProviderValidationError{
						field:  "Aws",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAws()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderValidationError{
					field:  "Aws",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Provider_Awssso:

		if all {
			switch v := interface{}(m.GetAwssso()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProviderValidationError{
						field:  "Awssso",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProviderValidationError{
						field:  "Awssso",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwssso()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderValidationError{
					field:  "Awssso",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Provider_Okta:

		if all {
			switch v := interface{}(m.GetOkta()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProviderValidationError{
						field:  "Okta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProviderValidationError{
						field:  "Okta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOkta()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderValidationError{
					field:  "Okta",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProviderMultiError(errors)
	}
	return nil
}

// ProviderMultiError is an error wrapping multiple validation errors returned
// by Provider.ValidateAll() if the designated constraints aren't met.
type ProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProviderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProviderMultiError) AllErrors() []error { return m }

// ProviderValidationError is the validation error returned by
// Provider.Validate if the designated constraints aren't met.
type ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderValidationError) ErrorName() string { return "ProviderValidationError" }

// Error satisfies the builtin error interface
func (e ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderValidationError{}

// Validate checks the field values on AWSProviderDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AWSProviderDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AWSProviderDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AWSProviderDetailsMultiError, or nil if none found.
func (m *AWSProviderDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *AWSProviderDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgManagementAccountId

	if len(errors) > 0 {
		return AWSProviderDetailsMultiError(errors)
	}
	return nil
}

// AWSProviderDetailsMultiError is an error wrapping multiple validation errors
// returned by AWSProviderDetails.ValidateAll() if the designated constraints
// aren't met.
type AWSProviderDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AWSProviderDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AWSProviderDetailsMultiError) AllErrors() []error { return m }

// AWSProviderDetailsValidationError is the validation error returned by
// AWSProviderDetails.Validate if the designated constraints aren't met.
type AWSProviderDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AWSProviderDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AWSProviderDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AWSProviderDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AWSProviderDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AWSProviderDetailsValidationError) ErrorName() string {
	return "AWSProviderDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e AWSProviderDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAWSProviderDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AWSProviderDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AWSProviderDetailsValidationError{}

// Validate checks the field values on AWSSSOProviderDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AWSSSOProviderDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AWSSSOProviderDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AWSSSOProviderDetailsMultiError, or nil if none found.
func (m *AWSSSOProviderDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *AWSSSOProviderDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgManagementAccountId

	if len(errors) > 0 {
		return AWSSSOProviderDetailsMultiError(errors)
	}
	return nil
}

// AWSSSOProviderDetailsMultiError is an error wrapping multiple validation
// errors returned by AWSSSOProviderDetails.ValidateAll() if the designated
// constraints aren't met.
type AWSSSOProviderDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AWSSSOProviderDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AWSSSOProviderDetailsMultiError) AllErrors() []error { return m }

// AWSSSOProviderDetailsValidationError is the validation error returned by
// AWSSSOProviderDetails.Validate if the designated constraints aren't met.
type AWSSSOProviderDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AWSSSOProviderDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AWSSSOProviderDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AWSSSOProviderDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AWSSSOProviderDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AWSSSOProviderDetailsValidationError) ErrorName() string {
	return "AWSSSOProviderDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e AWSSSOProviderDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAWSSSOProviderDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AWSSSOProviderDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AWSSSOProviderDetailsValidationError{}

// Validate checks the field values on OktaProviderDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OktaProviderDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OktaProviderDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OktaProviderDetailsMultiError, or nil if none found.
func (m *OktaProviderDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *OktaProviderDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgManagementAccountId

	if len(errors) > 0 {
		return OktaProviderDetailsMultiError(errors)
	}
	return nil
}

// OktaProviderDetailsMultiError is an error wrapping multiple validation
// errors returned by OktaProviderDetails.ValidateAll() if the designated
// constraints aren't met.
type OktaProviderDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OktaProviderDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OktaProviderDetailsMultiError) AllErrors() []error { return m }

// OktaProviderDetailsValidationError is the validation error returned by
// OktaProviderDetails.Validate if the designated constraints aren't met.
type OktaProviderDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OktaProviderDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OktaProviderDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OktaProviderDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OktaProviderDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OktaProviderDetailsValidationError) ErrorName() string {
	return "OktaProviderDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e OktaProviderDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOktaProviderDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OktaProviderDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OktaProviderDetailsValidationError{}

// Validate checks the field values on GetAllProviderDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllProviderDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllProviderDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllProviderDetailsRequestMultiError, or nil if none found.
func (m *GetAllProviderDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllProviderDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllProviderDetailsRequestMultiError(errors)
	}
	return nil
}

// GetAllProviderDetailsRequestMultiError is an error wrapping multiple
// validation errors returned by GetAllProviderDetailsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAllProviderDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllProviderDetailsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllProviderDetailsRequestMultiError) AllErrors() []error { return m }

// GetAllProviderDetailsRequestValidationError is the validation error returned
// by GetAllProviderDetailsRequest.Validate if the designated constraints
// aren't met.
type GetAllProviderDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllProviderDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllProviderDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllProviderDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllProviderDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllProviderDetailsRequestValidationError) ErrorName() string {
	return "GetAllProviderDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllProviderDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllProviderDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllProviderDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllProviderDetailsRequestValidationError{}

// Validate checks the field values on GetAllProviderDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllProviderDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllProviderDetailsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAllProviderDetailsResponseMultiError, or nil if none found.
func (m *GetAllProviderDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllProviderDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProviders()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAllProviderDetailsResponseValidationError{
					field:  "Providers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAllProviderDetailsResponseValidationError{
					field:  "Providers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProviders()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAllProviderDetailsResponseValidationError{
				field:  "Providers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Sha256Checksum

	if len(errors) > 0 {
		return GetAllProviderDetailsResponseMultiError(errors)
	}
	return nil
}

// GetAllProviderDetailsResponseMultiError is an error wrapping multiple
// validation errors returned by GetAllProviderDetailsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetAllProviderDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllProviderDetailsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllProviderDetailsResponseMultiError) AllErrors() []error { return m }

// GetAllProviderDetailsResponseValidationError is the validation error
// returned by GetAllProviderDetailsResponse.Validate if the designated
// constraints aren't met.
type GetAllProviderDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllProviderDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllProviderDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllProviderDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllProviderDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllProviderDetailsResponseValidationError) ErrorName() string {
	return "GetAllProviderDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllProviderDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllProviderDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllProviderDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllProviderDetailsResponseValidationError{}

// Validate checks the field values on GetAllProviderChecksumRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllProviderChecksumRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllProviderChecksumRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAllProviderChecksumRequestMultiError, or nil if none found.
func (m *GetAllProviderChecksumRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllProviderChecksumRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllProviderChecksumRequestMultiError(errors)
	}
	return nil
}

// GetAllProviderChecksumRequestMultiError is an error wrapping multiple
// validation errors returned by GetAllProviderChecksumRequest.ValidateAll()
// if the designated constraints aren't met.
type GetAllProviderChecksumRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllProviderChecksumRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllProviderChecksumRequestMultiError) AllErrors() []error { return m }

// GetAllProviderChecksumRequestValidationError is the validation error
// returned by GetAllProviderChecksumRequest.Validate if the designated
// constraints aren't met.
type GetAllProviderChecksumRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllProviderChecksumRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllProviderChecksumRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllProviderChecksumRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllProviderChecksumRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllProviderChecksumRequestValidationError) ErrorName() string {
	return "GetAllProviderChecksumRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllProviderChecksumRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllProviderChecksumRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllProviderChecksumRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllProviderChecksumRequestValidationError{}

// Validate checks the field values on GetAllProviderChecksumResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllProviderChecksumResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllProviderChecksumResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAllProviderChecksumResponseMultiError, or nil if none found.
func (m *GetAllProviderChecksumResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllProviderChecksumResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sha256Checksum

	if len(errors) > 0 {
		return GetAllProviderChecksumResponseMultiError(errors)
	}
	return nil
}

// GetAllProviderChecksumResponseMultiError is an error wrapping multiple
// validation errors returned by GetAllProviderChecksumResponse.ValidateAll()
// if the designated constraints aren't met.
type GetAllProviderChecksumResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllProviderChecksumResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllProviderChecksumResponseMultiError) AllErrors() []error { return m }

// GetAllProviderChecksumResponseValidationError is the validation error
// returned by GetAllProviderChecksumResponse.Validate if the designated
// constraints aren't met.
type GetAllProviderChecksumResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllProviderChecksumResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllProviderChecksumResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllProviderChecksumResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllProviderChecksumResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllProviderChecksumResponseValidationError) ErrorName() string {
	return "GetAllProviderChecksumResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllProviderChecksumResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllProviderChecksumResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllProviderChecksumResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllProviderChecksumResponseValidationError{}

// Validate checks the field values on GetAccessHandlersForProviderRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetAccessHandlersForProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessHandlersForProviderRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetAccessHandlersForProviderRequestMultiError, or nil if none found.
func (m *GetAccessHandlersForProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessHandlersForProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProviderId

	if len(errors) > 0 {
		return GetAccessHandlersForProviderRequestMultiError(errors)
	}
	return nil
}

// GetAccessHandlersForProviderRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetAccessHandlersForProviderRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAccessHandlersForProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessHandlersForProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessHandlersForProviderRequestMultiError) AllErrors() []error { return m }

// GetAccessHandlersForProviderRequestValidationError is the validation error
// returned by GetAccessHandlersForProviderRequest.Validate if the designated
// constraints aren't met.
type GetAccessHandlersForProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessHandlersForProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessHandlersForProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessHandlersForProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessHandlersForProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessHandlersForProviderRequestValidationError) ErrorName() string {
	return "GetAccessHandlersForProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessHandlersForProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessHandlersForProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessHandlersForProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessHandlersForProviderRequestValidationError{}

// Validate checks the field values on GetAccessHandlersForProviderResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetAccessHandlersForProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessHandlersForProviderResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetAccessHandlersForProviderResponseMultiError, or nil if none found.
func (m *GetAccessHandlersForProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessHandlersForProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccessHandlers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAccessHandlersForProviderResponseValidationError{
						field:  fmt.Sprintf("AccessHandlers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAccessHandlersForProviderResponseValidationError{
						field:  fmt.Sprintf("AccessHandlers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAccessHandlersForProviderResponseValidationError{
					field:  fmt.Sprintf("AccessHandlers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAccessHandlersForProviderResponseMultiError(errors)
	}
	return nil
}

// GetAccessHandlersForProviderResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetAccessHandlersForProviderResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAccessHandlersForProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessHandlersForProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessHandlersForProviderResponseMultiError) AllErrors() []error { return m }

// GetAccessHandlersForProviderResponseValidationError is the validation error
// returned by GetAccessHandlersForProviderResponse.Validate if the designated
// constraints aren't met.
type GetAccessHandlersForProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessHandlersForProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessHandlersForProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessHandlersForProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessHandlersForProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessHandlersForProviderResponseValidationError) ErrorName() string {
	return "GetAccessHandlersForProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessHandlersForProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessHandlersForProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessHandlersForProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessHandlersForProviderResponseValidationError{}

// Validate checks the field values on AddAccessHandlerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAccessHandlerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAccessHandlerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAccessHandlerRequestMultiError, or nil if none found.
func (m *AddAccessHandlerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAccessHandlerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProviderId

	// no validation rules for AccessHandlerUrl

	if len(errors) > 0 {
		return AddAccessHandlerRequestMultiError(errors)
	}
	return nil
}

// AddAccessHandlerRequestMultiError is an error wrapping multiple validation
// errors returned by AddAccessHandlerRequest.ValidateAll() if the designated
// constraints aren't met.
type AddAccessHandlerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAccessHandlerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAccessHandlerRequestMultiError) AllErrors() []error { return m }

// AddAccessHandlerRequestValidationError is the validation error returned by
// AddAccessHandlerRequest.Validate if the designated constraints aren't met.
type AddAccessHandlerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAccessHandlerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAccessHandlerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAccessHandlerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAccessHandlerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAccessHandlerRequestValidationError) ErrorName() string {
	return "AddAccessHandlerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddAccessHandlerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAccessHandlerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAccessHandlerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAccessHandlerRequestValidationError{}

// Validate checks the field values on AddAccessHandlerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAccessHandlerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAccessHandlerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAccessHandlerResponseMultiError, or nil if none found.
func (m *AddAccessHandlerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAccessHandlerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddAccessHandlerResponseMultiError(errors)
	}
	return nil
}

// AddAccessHandlerResponseMultiError is an error wrapping multiple validation
// errors returned by AddAccessHandlerResponse.ValidateAll() if the designated
// constraints aren't met.
type AddAccessHandlerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAccessHandlerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAccessHandlerResponseMultiError) AllErrors() []error { return m }

// AddAccessHandlerResponseValidationError is the validation error returned by
// AddAccessHandlerResponse.Validate if the designated constraints aren't met.
type AddAccessHandlerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAccessHandlerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAccessHandlerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAccessHandlerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAccessHandlerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAccessHandlerResponseValidationError) ErrorName() string {
	return "AddAccessHandlerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddAccessHandlerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAccessHandlerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAccessHandlerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAccessHandlerResponseValidationError{}

// Validate checks the field values on DeleteAccessHandlerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccessHandlerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccessHandlerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccessHandlerRequestMultiError, or nil if none found.
func (m *DeleteAccessHandlerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccessHandlerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProviderId

	// no validation rules for AccessHandlerUrl

	if len(errors) > 0 {
		return DeleteAccessHandlerRequestMultiError(errors)
	}
	return nil
}

// DeleteAccessHandlerRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteAccessHandlerRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteAccessHandlerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccessHandlerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccessHandlerRequestMultiError) AllErrors() []error { return m }

// DeleteAccessHandlerRequestValidationError is the validation error returned
// by DeleteAccessHandlerRequest.Validate if the designated constraints aren't met.
type DeleteAccessHandlerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccessHandlerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccessHandlerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccessHandlerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccessHandlerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccessHandlerRequestValidationError) ErrorName() string {
	return "DeleteAccessHandlerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccessHandlerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccessHandlerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccessHandlerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccessHandlerRequestValidationError{}

// Validate checks the field values on DeleteAccessHandlerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccessHandlerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccessHandlerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccessHandlerResponseMultiError, or nil if none found.
func (m *DeleteAccessHandlerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccessHandlerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAccessHandlerResponseMultiError(errors)
	}
	return nil
}

// DeleteAccessHandlerResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteAccessHandlerResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteAccessHandlerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccessHandlerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccessHandlerResponseMultiError) AllErrors() []error { return m }

// DeleteAccessHandlerResponseValidationError is the validation error returned
// by DeleteAccessHandlerResponse.Validate if the designated constraints
// aren't met.
type DeleteAccessHandlerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccessHandlerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccessHandlerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccessHandlerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccessHandlerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccessHandlerResponseValidationError) ErrorName() string {
	return "DeleteAccessHandlerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccessHandlerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccessHandlerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccessHandlerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccessHandlerResponseValidationError{}

// Validate checks the field values on UpdateCISettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCISettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCISettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCISettingsRequestMultiError, or nil if none found.
func (m *UpdateCISettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCISettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for RepositoryUrl

	if len(errors) > 0 {
		return UpdateCISettingsRequestMultiError(errors)
	}
	return nil
}

// UpdateCISettingsRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCISettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCISettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCISettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCISettingsRequestMultiError) AllErrors() []error { return m }

// UpdateCISettingsRequestValidationError is the validation error returned by
// UpdateCISettingsRequest.Validate if the designated constraints aren't met.
type UpdateCISettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCISettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCISettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCISettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCISettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCISettingsRequestValidationError) ErrorName() string {
	return "UpdateCISettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCISettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCISettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCISettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCISettingsRequestValidationError{}

// Validate checks the field values on UpdateCISettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCISettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCISettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCISettingsResponseMultiError, or nil if none found.
func (m *UpdateCISettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCISettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCISettingsResponseMultiError(errors)
	}
	return nil
}

// UpdateCISettingsResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCISettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCISettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCISettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCISettingsResponseMultiError) AllErrors() []error { return m }

// UpdateCISettingsResponseValidationError is the validation error returned by
// UpdateCISettingsResponse.Validate if the designated constraints aren't met.
type UpdateCISettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCISettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCISettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCISettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCISettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCISettingsResponseValidationError) ErrorName() string {
	return "UpdateCISettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCISettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCISettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCISettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCISettingsResponseValidationError{}

// Validate checks the field values on SlackConnection with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SlackConnection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SlackConnection with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SlackConnectionMultiError, or nil if none found.
func (m *SlackConnection) ValidateAll() error {
	return m.validate(true)
}

func (m *SlackConnection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BotAccessToken

	// no validation rules for ChannelId

	// no validation rules for ChannelName

	// no validation rules for Invited

	if len(errors) > 0 {
		return SlackConnectionMultiError(errors)
	}
	return nil
}

// SlackConnectionMultiError is an error wrapping multiple validation errors
// returned by SlackConnection.ValidateAll() if the designated constraints
// aren't met.
type SlackConnectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SlackConnectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SlackConnectionMultiError) AllErrors() []error { return m }

// SlackConnectionValidationError is the validation error returned by
// SlackConnection.Validate if the designated constraints aren't met.
type SlackConnectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlackConnectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlackConnectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlackConnectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlackConnectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlackConnectionValidationError) ErrorName() string { return "SlackConnectionValidationError" }

// Error satisfies the builtin error interface
func (e SlackConnectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlackConnection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlackConnectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlackConnectionValidationError{}

// Validate checks the field values on ListSlackConnectionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSlackConnectionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSlackConnectionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSlackConnectionsRequestMultiError, or nil if none found.
func (m *ListSlackConnectionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSlackConnectionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSlackConnectionsRequestMultiError(errors)
	}
	return nil
}

// ListSlackConnectionsRequestMultiError is an error wrapping multiple
// validation errors returned by ListSlackConnectionsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListSlackConnectionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSlackConnectionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSlackConnectionsRequestMultiError) AllErrors() []error { return m }

// ListSlackConnectionsRequestValidationError is the validation error returned
// by ListSlackConnectionsRequest.Validate if the designated constraints
// aren't met.
type ListSlackConnectionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSlackConnectionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSlackConnectionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSlackConnectionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSlackConnectionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSlackConnectionsRequestValidationError) ErrorName() string {
	return "ListSlackConnectionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSlackConnectionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSlackConnectionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSlackConnectionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSlackConnectionsRequestValidationError{}

// Validate checks the field values on ListSlackConnectionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSlackConnectionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSlackConnectionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSlackConnectionsResponseMultiError, or nil if none found.
func (m *ListSlackConnectionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSlackConnectionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSlackConnections() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSlackConnectionsResponseValidationError{
						field:  fmt.Sprintf("SlackConnections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSlackConnectionsResponseValidationError{
						field:  fmt.Sprintf("SlackConnections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSlackConnectionsResponseValidationError{
					field:  fmt.Sprintf("SlackConnections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSlackConnectionsResponseMultiError(errors)
	}
	return nil
}

// ListSlackConnectionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListSlackConnectionsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListSlackConnectionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSlackConnectionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSlackConnectionsResponseMultiError) AllErrors() []error { return m }

// ListSlackConnectionsResponseValidationError is the validation error returned
// by ListSlackConnectionsResponse.Validate if the designated constraints
// aren't met.
type ListSlackConnectionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSlackConnectionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSlackConnectionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSlackConnectionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSlackConnectionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSlackConnectionsResponseValidationError) ErrorName() string {
	return "ListSlackConnectionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSlackConnectionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSlackConnectionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSlackConnectionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSlackConnectionsResponseValidationError{}

// Validate checks the field values on HasSlackConnectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HasSlackConnectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HasSlackConnectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HasSlackConnectionRequestMultiError, or nil if none found.
func (m *HasSlackConnectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HasSlackConnectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HasSlackConnectionRequestMultiError(errors)
	}
	return nil
}

// HasSlackConnectionRequestMultiError is an error wrapping multiple validation
// errors returned by HasSlackConnectionRequest.ValidateAll() if the
// designated constraints aren't met.
type HasSlackConnectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HasSlackConnectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HasSlackConnectionRequestMultiError) AllErrors() []error { return m }

// HasSlackConnectionRequestValidationError is the validation error returned by
// HasSlackConnectionRequest.Validate if the designated constraints aren't met.
type HasSlackConnectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HasSlackConnectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HasSlackConnectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HasSlackConnectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HasSlackConnectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HasSlackConnectionRequestValidationError) ErrorName() string {
	return "HasSlackConnectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HasSlackConnectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHasSlackConnectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HasSlackConnectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HasSlackConnectionRequestValidationError{}

// Validate checks the field values on HasSlackConnectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HasSlackConnectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HasSlackConnectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HasSlackConnectionResponseMultiError, or nil if none found.
func (m *HasSlackConnectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HasSlackConnectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HasSlackConnection

	if len(errors) > 0 {
		return HasSlackConnectionResponseMultiError(errors)
	}
	return nil
}

// HasSlackConnectionResponseMultiError is an error wrapping multiple
// validation errors returned by HasSlackConnectionResponse.ValidateAll() if
// the designated constraints aren't met.
type HasSlackConnectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HasSlackConnectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HasSlackConnectionResponseMultiError) AllErrors() []error { return m }

// HasSlackConnectionResponseValidationError is the validation error returned
// by HasSlackConnectionResponse.Validate if the designated constraints aren't met.
type HasSlackConnectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HasSlackConnectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HasSlackConnectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HasSlackConnectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HasSlackConnectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HasSlackConnectionResponseValidationError) ErrorName() string {
	return "HasSlackConnectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HasSlackConnectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHasSlackConnectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HasSlackConnectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HasSlackConnectionResponseValidationError{}

// Validate checks the field values on GetSlackInstallURLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSlackInstallURLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSlackInstallURLRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSlackInstallURLRequestMultiError, or nil if none found.
func (m *GetSlackInstallURLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSlackInstallURLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSlackInstallURLRequestMultiError(errors)
	}
	return nil
}

// GetSlackInstallURLRequestMultiError is an error wrapping multiple validation
// errors returned by GetSlackInstallURLRequest.ValidateAll() if the
// designated constraints aren't met.
type GetSlackInstallURLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSlackInstallURLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSlackInstallURLRequestMultiError) AllErrors() []error { return m }

// GetSlackInstallURLRequestValidationError is the validation error returned by
// GetSlackInstallURLRequest.Validate if the designated constraints aren't met.
type GetSlackInstallURLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSlackInstallURLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSlackInstallURLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSlackInstallURLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSlackInstallURLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSlackInstallURLRequestValidationError) ErrorName() string {
	return "GetSlackInstallURLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSlackInstallURLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSlackInstallURLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSlackInstallURLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSlackInstallURLRequestValidationError{}

// Validate checks the field values on GetSlackInstallURLResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSlackInstallURLResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSlackInstallURLResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSlackInstallURLResponseMultiError, or nil if none found.
func (m *GetSlackInstallURLResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSlackInstallURLResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstallUrl

	if len(errors) > 0 {
		return GetSlackInstallURLResponseMultiError(errors)
	}
	return nil
}

// GetSlackInstallURLResponseMultiError is an error wrapping multiple
// validation errors returned by GetSlackInstallURLResponse.ValidateAll() if
// the designated constraints aren't met.
type GetSlackInstallURLResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSlackInstallURLResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSlackInstallURLResponseMultiError) AllErrors() []error { return m }

// GetSlackInstallURLResponseValidationError is the validation error returned
// by GetSlackInstallURLResponse.Validate if the designated constraints aren't met.
type GetSlackInstallURLResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSlackInstallURLResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSlackInstallURLResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSlackInstallURLResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSlackInstallURLResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSlackInstallURLResponseValidationError) ErrorName() string {
	return "GetSlackInstallURLResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSlackInstallURLResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSlackInstallURLResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSlackInstallURLResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSlackInstallURLResponseValidationError{}

// Validate checks the field values on UninstallSlackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UninstallSlackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UninstallSlackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UninstallSlackRequestMultiError, or nil if none found.
func (m *UninstallSlackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UninstallSlackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UninstallSlackRequestMultiError(errors)
	}
	return nil
}

// UninstallSlackRequestMultiError is an error wrapping multiple validation
// errors returned by UninstallSlackRequest.ValidateAll() if the designated
// constraints aren't met.
type UninstallSlackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UninstallSlackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UninstallSlackRequestMultiError) AllErrors() []error { return m }

// UninstallSlackRequestValidationError is the validation error returned by
// UninstallSlackRequest.Validate if the designated constraints aren't met.
type UninstallSlackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UninstallSlackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UninstallSlackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UninstallSlackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UninstallSlackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UninstallSlackRequestValidationError) ErrorName() string {
	return "UninstallSlackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UninstallSlackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUninstallSlackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UninstallSlackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UninstallSlackRequestValidationError{}

// Validate checks the field values on UninstallSlackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UninstallSlackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UninstallSlackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UninstallSlackResponseMultiError, or nil if none found.
func (m *UninstallSlackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UninstallSlackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UninstallSlackResponseMultiError(errors)
	}
	return nil
}

// UninstallSlackResponseMultiError is an error wrapping multiple validation
// errors returned by UninstallSlackResponse.ValidateAll() if the designated
// constraints aren't met.
type UninstallSlackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UninstallSlackResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UninstallSlackResponseMultiError) AllErrors() []error { return m }

// UninstallSlackResponseValidationError is the validation error returned by
// UninstallSlackResponse.Validate if the designated constraints aren't met.
type UninstallSlackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UninstallSlackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UninstallSlackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UninstallSlackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UninstallSlackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UninstallSlackResponseValidationError) ErrorName() string {
	return "UninstallSlackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UninstallSlackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUninstallSlackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UninstallSlackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UninstallSlackResponseValidationError{}

// Validate checks the field values on SlackChannelInviteTestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SlackChannelInviteTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SlackChannelInviteTestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SlackChannelInviteTestRequestMultiError, or nil if none found.
func (m *SlackChannelInviteTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SlackChannelInviteTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelId

	if len(errors) > 0 {
		return SlackChannelInviteTestRequestMultiError(errors)
	}
	return nil
}

// SlackChannelInviteTestRequestMultiError is an error wrapping multiple
// validation errors returned by SlackChannelInviteTestRequest.ValidateAll()
// if the designated constraints aren't met.
type SlackChannelInviteTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SlackChannelInviteTestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SlackChannelInviteTestRequestMultiError) AllErrors() []error { return m }

// SlackChannelInviteTestRequestValidationError is the validation error
// returned by SlackChannelInviteTestRequest.Validate if the designated
// constraints aren't met.
type SlackChannelInviteTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlackChannelInviteTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlackChannelInviteTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlackChannelInviteTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlackChannelInviteTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlackChannelInviteTestRequestValidationError) ErrorName() string {
	return "SlackChannelInviteTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SlackChannelInviteTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlackChannelInviteTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlackChannelInviteTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlackChannelInviteTestRequestValidationError{}

// Validate checks the field values on SlackChannelInviteTestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SlackChannelInviteTestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SlackChannelInviteTestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SlackChannelInviteTestResponseMultiError, or nil if none found.
func (m *SlackChannelInviteTestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SlackChannelInviteTestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return SlackChannelInviteTestResponseMultiError(errors)
	}
	return nil
}

// SlackChannelInviteTestResponseMultiError is an error wrapping multiple
// validation errors returned by SlackChannelInviteTestResponse.ValidateAll()
// if the designated constraints aren't met.
type SlackChannelInviteTestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SlackChannelInviteTestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SlackChannelInviteTestResponseMultiError) AllErrors() []error { return m }

// SlackChannelInviteTestResponseValidationError is the validation error
// returned by SlackChannelInviteTestResponse.Validate if the designated
// constraints aren't met.
type SlackChannelInviteTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlackChannelInviteTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlackChannelInviteTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlackChannelInviteTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlackChannelInviteTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlackChannelInviteTestResponseValidationError) ErrorName() string {
	return "SlackChannelInviteTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SlackChannelInviteTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlackChannelInviteTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlackChannelInviteTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlackChannelInviteTestResponseValidationError{}
