// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package teamv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeamServiceClient is the client API for TeamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamServiceClient interface {
	ListRoleAccessRequests(ctx context.Context, in *ListRoleAccessRequestsRequest, opts ...grpc.CallOption) (*ListRoleAccessRequestsResponse, error)
	ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error)
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error)
	IsAdminUser(ctx context.Context, in *IsAdminUserRequest, opts ...grpc.CallOption) (*IsAdminUserResponse, error)
	EnrolProvider(ctx context.Context, in *EnrolProviderRequest, opts ...grpc.CallOption) (*EnrolProviderResponse, error)
	ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error)
	// DeleteProvider removes a provider from a Granted team.
	DeleteProvider(ctx context.Context, in *DeleteProviderRequest, opts ...grpc.CallOption) (*DeleteProviderResponse, error)
	// GetStatus returns the overall state of a team's Granted deployments and whether any
	// actions are required from an administrator.
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	GetProvider(ctx context.Context, in *GetProviderRequest, opts ...grpc.CallOption) (*GetProviderResponse, error)
	// GetAllProviderDetails returns details about a team's providers including all accounts and
	// access handlers associated with the provider.
	GetAllProviderDetails(ctx context.Context, in *GetAllProviderDetailsRequest, opts ...grpc.CallOption) (*GetAllProviderDetailsResponse, error)
	// GetAllProviderChecksum is used by clients to determine whether their local cache of provider
	// details requires an update.
	GetAllProviderChecksum(ctx context.Context, in *GetAllProviderChecksumRequest, opts ...grpc.CallOption) (*GetAllProviderChecksumResponse, error)
	// GetAccessHandlersForProvider lists the Access Handlers associated with a provider
	GetAccessHandlersForProvider(ctx context.Context, in *GetAccessHandlersForProviderRequest, opts ...grpc.CallOption) (*GetAccessHandlersForProviderResponse, error)
	// AddAccessHandler registers a new Access Handler for a provider
	AddAccessHandler(ctx context.Context, in *AddAccessHandlerRequest, opts ...grpc.CallOption) (*AddAccessHandlerResponse, error)
	// DeleteAccessHandler deletes an Access Handler from a provider
	DeleteAccessHandler(ctx context.Context, in *DeleteAccessHandlerRequest, opts ...grpc.CallOption) (*DeleteAccessHandlerResponse, error)
	// UpdateCISettings enables or disabled CI role deployments for a team.
	UpdateCISettings(ctx context.Context, in *UpdateCISettingsRequest, opts ...grpc.CallOption) (*UpdateCISettingsResponse, error)
	ListSlackConnections(ctx context.Context, in *ListSlackConnectionsRequest, opts ...grpc.CallOption) (*ListSlackConnectionsResponse, error)
	HasSlackConnection(ctx context.Context, in *HasSlackConnectionRequest, opts ...grpc.CallOption) (*HasSlackConnectionResponse, error)
	GetSlackInstallURL(ctx context.Context, in *GetSlackInstallURLRequest, opts ...grpc.CallOption) (*GetSlackInstallURLResponse, error)
	UninstallSlack(ctx context.Context, in *UninstallSlackRequest, opts ...grpc.CallOption) (*UninstallSlackResponse, error)
	SlackChannelInviteTest(ctx context.Context, in *SlackChannelInviteTestRequest, opts ...grpc.CallOption) (*SlackChannelInviteTestResponse, error)
}

type teamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamServiceClient(cc grpc.ClientConnInterface) TeamServiceClient {
	return &teamServiceClient{cc}
}

func (c *teamServiceClient) ListRoleAccessRequests(ctx context.Context, in *ListRoleAccessRequestsRequest, opts ...grpc.CallOption) (*ListRoleAccessRequestsResponse, error) {
	out := new(ListRoleAccessRequestsResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/ListRoleAccessRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error) {
	out := new(ListMembersResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/ListMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error) {
	out := new(UpdateConfigResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) IsAdminUser(ctx context.Context, in *IsAdminUserRequest, opts ...grpc.CallOption) (*IsAdminUserResponse, error) {
	out := new(IsAdminUserResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/IsAdminUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) EnrolProvider(ctx context.Context, in *EnrolProviderRequest, opts ...grpc.CallOption) (*EnrolProviderResponse, error) {
	out := new(EnrolProviderResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/EnrolProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error) {
	out := new(ListProvidersResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/ListProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) DeleteProvider(ctx context.Context, in *DeleteProviderRequest, opts ...grpc.CallOption) (*DeleteProviderResponse, error) {
	out := new(DeleteProviderResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/DeleteProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetProvider(ctx context.Context, in *GetProviderRequest, opts ...grpc.CallOption) (*GetProviderResponse, error) {
	out := new(GetProviderResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/GetProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetAllProviderDetails(ctx context.Context, in *GetAllProviderDetailsRequest, opts ...grpc.CallOption) (*GetAllProviderDetailsResponse, error) {
	out := new(GetAllProviderDetailsResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/GetAllProviderDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetAllProviderChecksum(ctx context.Context, in *GetAllProviderChecksumRequest, opts ...grpc.CallOption) (*GetAllProviderChecksumResponse, error) {
	out := new(GetAllProviderChecksumResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/GetAllProviderChecksum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetAccessHandlersForProvider(ctx context.Context, in *GetAccessHandlersForProviderRequest, opts ...grpc.CallOption) (*GetAccessHandlersForProviderResponse, error) {
	out := new(GetAccessHandlersForProviderResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/GetAccessHandlersForProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) AddAccessHandler(ctx context.Context, in *AddAccessHandlerRequest, opts ...grpc.CallOption) (*AddAccessHandlerResponse, error) {
	out := new(AddAccessHandlerResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/AddAccessHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) DeleteAccessHandler(ctx context.Context, in *DeleteAccessHandlerRequest, opts ...grpc.CallOption) (*DeleteAccessHandlerResponse, error) {
	out := new(DeleteAccessHandlerResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/DeleteAccessHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) UpdateCISettings(ctx context.Context, in *UpdateCISettingsRequest, opts ...grpc.CallOption) (*UpdateCISettingsResponse, error) {
	out := new(UpdateCISettingsResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/UpdateCISettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) ListSlackConnections(ctx context.Context, in *ListSlackConnectionsRequest, opts ...grpc.CallOption) (*ListSlackConnectionsResponse, error) {
	out := new(ListSlackConnectionsResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/ListSlackConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) HasSlackConnection(ctx context.Context, in *HasSlackConnectionRequest, opts ...grpc.CallOption) (*HasSlackConnectionResponse, error) {
	out := new(HasSlackConnectionResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/HasSlackConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetSlackInstallURL(ctx context.Context, in *GetSlackInstallURLRequest, opts ...grpc.CallOption) (*GetSlackInstallURLResponse, error) {
	out := new(GetSlackInstallURLResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/GetSlackInstallURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) UninstallSlack(ctx context.Context, in *UninstallSlackRequest, opts ...grpc.CallOption) (*UninstallSlackResponse, error) {
	out := new(UninstallSlackResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/UninstallSlack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) SlackChannelInviteTest(ctx context.Context, in *SlackChannelInviteTestRequest, opts ...grpc.CallOption) (*SlackChannelInviteTestResponse, error) {
	out := new(SlackChannelInviteTestResponse)
	err := c.cc.Invoke(ctx, "/team.v1alpha1.TeamService/SlackChannelInviteTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamServiceServer is the server API for TeamService service.
// All implementations should embed UnimplementedTeamServiceServer
// for forward compatibility
type TeamServiceServer interface {
	ListRoleAccessRequests(context.Context, *ListRoleAccessRequestsRequest) (*ListRoleAccessRequestsResponse, error)
	ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error)
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error)
	IsAdminUser(context.Context, *IsAdminUserRequest) (*IsAdminUserResponse, error)
	EnrolProvider(context.Context, *EnrolProviderRequest) (*EnrolProviderResponse, error)
	ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error)
	// DeleteProvider removes a provider from a Granted team.
	DeleteProvider(context.Context, *DeleteProviderRequest) (*DeleteProviderResponse, error)
	// GetStatus returns the overall state of a team's Granted deployments and whether any
	// actions are required from an administrator.
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	GetProvider(context.Context, *GetProviderRequest) (*GetProviderResponse, error)
	// GetAllProviderDetails returns details about a team's providers including all accounts and
	// access handlers associated with the provider.
	GetAllProviderDetails(context.Context, *GetAllProviderDetailsRequest) (*GetAllProviderDetailsResponse, error)
	// GetAllProviderChecksum is used by clients to determine whether their local cache of provider
	// details requires an update.
	GetAllProviderChecksum(context.Context, *GetAllProviderChecksumRequest) (*GetAllProviderChecksumResponse, error)
	// GetAccessHandlersForProvider lists the Access Handlers associated with a provider
	GetAccessHandlersForProvider(context.Context, *GetAccessHandlersForProviderRequest) (*GetAccessHandlersForProviderResponse, error)
	// AddAccessHandler registers a new Access Handler for a provider
	AddAccessHandler(context.Context, *AddAccessHandlerRequest) (*AddAccessHandlerResponse, error)
	// DeleteAccessHandler deletes an Access Handler from a provider
	DeleteAccessHandler(context.Context, *DeleteAccessHandlerRequest) (*DeleteAccessHandlerResponse, error)
	// UpdateCISettings enables or disabled CI role deployments for a team.
	UpdateCISettings(context.Context, *UpdateCISettingsRequest) (*UpdateCISettingsResponse, error)
	ListSlackConnections(context.Context, *ListSlackConnectionsRequest) (*ListSlackConnectionsResponse, error)
	HasSlackConnection(context.Context, *HasSlackConnectionRequest) (*HasSlackConnectionResponse, error)
	GetSlackInstallURL(context.Context, *GetSlackInstallURLRequest) (*GetSlackInstallURLResponse, error)
	UninstallSlack(context.Context, *UninstallSlackRequest) (*UninstallSlackResponse, error)
	SlackChannelInviteTest(context.Context, *SlackChannelInviteTestRequest) (*SlackChannelInviteTestResponse, error)
}

// UnimplementedTeamServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTeamServiceServer struct {
}

func (UnimplementedTeamServiceServer) ListRoleAccessRequests(context.Context, *ListRoleAccessRequestsRequest) (*ListRoleAccessRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleAccessRequests not implemented")
}
func (UnimplementedTeamServiceServer) ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedTeamServiceServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedTeamServiceServer) UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedTeamServiceServer) IsAdminUser(context.Context, *IsAdminUserRequest) (*IsAdminUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAdminUser not implemented")
}
func (UnimplementedTeamServiceServer) EnrolProvider(context.Context, *EnrolProviderRequest) (*EnrolProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrolProvider not implemented")
}
func (UnimplementedTeamServiceServer) ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProviders not implemented")
}
func (UnimplementedTeamServiceServer) DeleteProvider(context.Context, *DeleteProviderRequest) (*DeleteProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProvider not implemented")
}
func (UnimplementedTeamServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedTeamServiceServer) GetProvider(context.Context, *GetProviderRequest) (*GetProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvider not implemented")
}
func (UnimplementedTeamServiceServer) GetAllProviderDetails(context.Context, *GetAllProviderDetailsRequest) (*GetAllProviderDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProviderDetails not implemented")
}
func (UnimplementedTeamServiceServer) GetAllProviderChecksum(context.Context, *GetAllProviderChecksumRequest) (*GetAllProviderChecksumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProviderChecksum not implemented")
}
func (UnimplementedTeamServiceServer) GetAccessHandlersForProvider(context.Context, *GetAccessHandlersForProviderRequest) (*GetAccessHandlersForProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessHandlersForProvider not implemented")
}
func (UnimplementedTeamServiceServer) AddAccessHandler(context.Context, *AddAccessHandlerRequest) (*AddAccessHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccessHandler not implemented")
}
func (UnimplementedTeamServiceServer) DeleteAccessHandler(context.Context, *DeleteAccessHandlerRequest) (*DeleteAccessHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccessHandler not implemented")
}
func (UnimplementedTeamServiceServer) UpdateCISettings(context.Context, *UpdateCISettingsRequest) (*UpdateCISettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCISettings not implemented")
}
func (UnimplementedTeamServiceServer) ListSlackConnections(context.Context, *ListSlackConnectionsRequest) (*ListSlackConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSlackConnections not implemented")
}
func (UnimplementedTeamServiceServer) HasSlackConnection(context.Context, *HasSlackConnectionRequest) (*HasSlackConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasSlackConnection not implemented")
}
func (UnimplementedTeamServiceServer) GetSlackInstallURL(context.Context, *GetSlackInstallURLRequest) (*GetSlackInstallURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlackInstallURL not implemented")
}
func (UnimplementedTeamServiceServer) UninstallSlack(context.Context, *UninstallSlackRequest) (*UninstallSlackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallSlack not implemented")
}
func (UnimplementedTeamServiceServer) SlackChannelInviteTest(context.Context, *SlackChannelInviteTestRequest) (*SlackChannelInviteTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlackChannelInviteTest not implemented")
}

// UnsafeTeamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamServiceServer will
// result in compilation errors.
type UnsafeTeamServiceServer interface {
	mustEmbedUnimplementedTeamServiceServer()
}

func RegisterTeamServiceServer(s grpc.ServiceRegistrar, srv TeamServiceServer) {
	s.RegisterService(&TeamService_ServiceDesc, srv)
}

func _TeamService_ListRoleAccessRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleAccessRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).ListRoleAccessRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/ListRoleAccessRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).ListRoleAccessRequests(ctx, req.(*ListRoleAccessRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/ListMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).ListMembers(ctx, req.(*ListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_IsAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).IsAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/IsAdminUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).IsAdminUser(ctx, req.(*IsAdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_EnrolProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrolProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).EnrolProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/EnrolProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).EnrolProvider(ctx, req.(*EnrolProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_ListProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).ListProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/ListProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).ListProviders(ctx, req.(*ListProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_DeleteProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).DeleteProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/DeleteProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).DeleteProvider(ctx, req.(*DeleteProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/GetProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetProvider(ctx, req.(*GetProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetAllProviderDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProviderDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetAllProviderDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/GetAllProviderDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetAllProviderDetails(ctx, req.(*GetAllProviderDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetAllProviderChecksum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProviderChecksumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetAllProviderChecksum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/GetAllProviderChecksum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetAllProviderChecksum(ctx, req.(*GetAllProviderChecksumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetAccessHandlersForProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessHandlersForProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetAccessHandlersForProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/GetAccessHandlersForProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetAccessHandlersForProvider(ctx, req.(*GetAccessHandlersForProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_AddAccessHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccessHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).AddAccessHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/AddAccessHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).AddAccessHandler(ctx, req.(*AddAccessHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_DeleteAccessHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccessHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).DeleteAccessHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/DeleteAccessHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).DeleteAccessHandler(ctx, req.(*DeleteAccessHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_UpdateCISettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCISettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).UpdateCISettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/UpdateCISettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).UpdateCISettings(ctx, req.(*UpdateCISettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_ListSlackConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSlackConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).ListSlackConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/ListSlackConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).ListSlackConnections(ctx, req.(*ListSlackConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_HasSlackConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasSlackConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).HasSlackConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/HasSlackConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).HasSlackConnection(ctx, req.(*HasSlackConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetSlackInstallURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlackInstallURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetSlackInstallURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/GetSlackInstallURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetSlackInstallURL(ctx, req.(*GetSlackInstallURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_UninstallSlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallSlackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).UninstallSlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/UninstallSlack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).UninstallSlack(ctx, req.(*UninstallSlackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_SlackChannelInviteTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlackChannelInviteTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).SlackChannelInviteTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.v1alpha1.TeamService/SlackChannelInviteTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).SlackChannelInviteTest(ctx, req.(*SlackChannelInviteTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeamService_ServiceDesc is the grpc.ServiceDesc for TeamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "team.v1alpha1.TeamService",
	HandlerType: (*TeamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRoleAccessRequests",
			Handler:    _TeamService_ListRoleAccessRequests_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _TeamService_ListMembers_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _TeamService_ListRoles_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _TeamService_UpdateConfig_Handler,
		},
		{
			MethodName: "IsAdminUser",
			Handler:    _TeamService_IsAdminUser_Handler,
		},
		{
			MethodName: "EnrolProvider",
			Handler:    _TeamService_EnrolProvider_Handler,
		},
		{
			MethodName: "ListProviders",
			Handler:    _TeamService_ListProviders_Handler,
		},
		{
			MethodName: "DeleteProvider",
			Handler:    _TeamService_DeleteProvider_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _TeamService_GetStatus_Handler,
		},
		{
			MethodName: "GetProvider",
			Handler:    _TeamService_GetProvider_Handler,
		},
		{
			MethodName: "GetAllProviderDetails",
			Handler:    _TeamService_GetAllProviderDetails_Handler,
		},
		{
			MethodName: "GetAllProviderChecksum",
			Handler:    _TeamService_GetAllProviderChecksum_Handler,
		},
		{
			MethodName: "GetAccessHandlersForProvider",
			Handler:    _TeamService_GetAccessHandlersForProvider_Handler,
		},
		{
			MethodName: "AddAccessHandler",
			Handler:    _TeamService_AddAccessHandler_Handler,
		},
		{
			MethodName: "DeleteAccessHandler",
			Handler:    _TeamService_DeleteAccessHandler_Handler,
		},
		{
			MethodName: "UpdateCISettings",
			Handler:    _TeamService_UpdateCISettings_Handler,
		},
		{
			MethodName: "ListSlackConnections",
			Handler:    _TeamService_ListSlackConnections_Handler,
		},
		{
			MethodName: "HasSlackConnection",
			Handler:    _TeamService_HasSlackConnection_Handler,
		},
		{
			MethodName: "GetSlackInstallURL",
			Handler:    _TeamService_GetSlackInstallURL_Handler,
		},
		{
			MethodName: "UninstallSlack",
			Handler:    _TeamService_UninstallSlack_Handler,
		},
		{
			MethodName: "SlackChannelInviteTest",
			Handler:    _TeamService_SlackChannelInviteTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "team/v1alpha1/team.proto",
}
