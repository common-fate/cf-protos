// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ssov1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SSOServiceClient is the client API for SSOService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSOServiceClient interface {
	// SetupSAML sets up SAML SSO settings for a Granted team.
	SetupSAML(ctx context.Context, in *SetupSAMLRequest, opts ...grpc.CallOption) (*SetupSAMLResponse, error)
	// GetSettings returns the current SSO settings
	GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error)
	// SetSAMLIdentityProviderMetadata sets the SAML identity provider metadata in Granted. This is needed
	// to complete SAML SSO setup.
	SetSAMLIdentityProviderMetadata(ctx context.Context, in *SetSAMLIdentityProviderMetadataRequest, opts ...grpc.CallOption) (*SetSAMLIdentityProviderMetadataResponse, error)
	// ChangeMode configures a team's provider to use SAML SSO, or the internal Common Fate
	// identity provider. A team needs to have SAML SSO fully set up (including IDP metadata configured)
	// before they can switch their SSO provider over.
	ChangeMode(ctx context.Context, in *ChangeModeRequest, opts ...grpc.CallOption) (*ChangeModeResponse, error)
}

type sSOServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSSOServiceClient(cc grpc.ClientConnInterface) SSOServiceClient {
	return &sSOServiceClient{cc}
}

func (c *sSOServiceClient) SetupSAML(ctx context.Context, in *SetupSAMLRequest, opts ...grpc.CallOption) (*SetupSAMLResponse, error) {
	out := new(SetupSAMLResponse)
	err := c.cc.Invoke(ctx, "/sso.v1alpha1.SSOService/SetupSAML", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOServiceClient) GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error) {
	out := new(GetSettingsResponse)
	err := c.cc.Invoke(ctx, "/sso.v1alpha1.SSOService/GetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOServiceClient) SetSAMLIdentityProviderMetadata(ctx context.Context, in *SetSAMLIdentityProviderMetadataRequest, opts ...grpc.CallOption) (*SetSAMLIdentityProviderMetadataResponse, error) {
	out := new(SetSAMLIdentityProviderMetadataResponse)
	err := c.cc.Invoke(ctx, "/sso.v1alpha1.SSOService/SetSAMLIdentityProviderMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOServiceClient) ChangeMode(ctx context.Context, in *ChangeModeRequest, opts ...grpc.CallOption) (*ChangeModeResponse, error) {
	out := new(ChangeModeResponse)
	err := c.cc.Invoke(ctx, "/sso.v1alpha1.SSOService/ChangeMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSOServiceServer is the server API for SSOService service.
// All implementations should embed UnimplementedSSOServiceServer
// for forward compatibility
type SSOServiceServer interface {
	// SetupSAML sets up SAML SSO settings for a Granted team.
	SetupSAML(context.Context, *SetupSAMLRequest) (*SetupSAMLResponse, error)
	// GetSettings returns the current SSO settings
	GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error)
	// SetSAMLIdentityProviderMetadata sets the SAML identity provider metadata in Granted. This is needed
	// to complete SAML SSO setup.
	SetSAMLIdentityProviderMetadata(context.Context, *SetSAMLIdentityProviderMetadataRequest) (*SetSAMLIdentityProviderMetadataResponse, error)
	// ChangeMode configures a team's provider to use SAML SSO, or the internal Common Fate
	// identity provider. A team needs to have SAML SSO fully set up (including IDP metadata configured)
	// before they can switch their SSO provider over.
	ChangeMode(context.Context, *ChangeModeRequest) (*ChangeModeResponse, error)
}

// UnimplementedSSOServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSSOServiceServer struct {
}

func (UnimplementedSSOServiceServer) SetupSAML(context.Context, *SetupSAMLRequest) (*SetupSAMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupSAML not implemented")
}
func (UnimplementedSSOServiceServer) GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedSSOServiceServer) SetSAMLIdentityProviderMetadata(context.Context, *SetSAMLIdentityProviderMetadataRequest) (*SetSAMLIdentityProviderMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSAMLIdentityProviderMetadata not implemented")
}
func (UnimplementedSSOServiceServer) ChangeMode(context.Context, *ChangeModeRequest) (*ChangeModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMode not implemented")
}

// UnsafeSSOServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSOServiceServer will
// result in compilation errors.
type UnsafeSSOServiceServer interface {
	mustEmbedUnimplementedSSOServiceServer()
}

func RegisterSSOServiceServer(s grpc.ServiceRegistrar, srv SSOServiceServer) {
	s.RegisterService(&SSOService_ServiceDesc, srv)
}

func _SSOService_SetupSAML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupSAMLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServiceServer).SetupSAML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1alpha1.SSOService/SetupSAML",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServiceServer).SetupSAML(ctx, req.(*SetupSAMLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOService_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServiceServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1alpha1.SSOService/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServiceServer).GetSettings(ctx, req.(*GetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOService_SetSAMLIdentityProviderMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSAMLIdentityProviderMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServiceServer).SetSAMLIdentityProviderMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1alpha1.SSOService/SetSAMLIdentityProviderMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServiceServer).SetSAMLIdentityProviderMetadata(ctx, req.(*SetSAMLIdentityProviderMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSOService_ChangeMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServiceServer).ChangeMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1alpha1.SSOService/ChangeMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServiceServer).ChangeMode(ctx, req.(*ChangeModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SSOService_ServiceDesc is the grpc.ServiceDesc for SSOService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSOService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sso.v1alpha1.SSOService",
	HandlerType: (*SSOServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupSAML",
			Handler:    _SSOService_SetupSAML_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _SSOService_GetSettings_Handler,
		},
		{
			MethodName: "SetSAMLIdentityProviderMetadata",
			Handler:    _SSOService_SetSAMLIdentityProviderMetadata_Handler,
		},
		{
			MethodName: "ChangeMode",
			Handler:    _SSOService_ChangeMode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso/v1alpha1/sso.proto",
}
