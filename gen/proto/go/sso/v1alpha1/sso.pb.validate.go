// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sso/v1alpha1/sso.proto

package ssov1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SetupSAMLRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetupSAMLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetupSAMLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetupSAMLRequestMultiError, or nil if none found.
func (m *SetupSAMLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetupSAMLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetupSAMLRequestMultiError(errors)
	}

	return nil
}

// SetupSAMLRequestMultiError is an error wrapping multiple validation errors
// returned by SetupSAMLRequest.ValidateAll() if the designated constraints
// aren't met.
type SetupSAMLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetupSAMLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetupSAMLRequestMultiError) AllErrors() []error { return m }

// SetupSAMLRequestValidationError is the validation error returned by
// SetupSAMLRequest.Validate if the designated constraints aren't met.
type SetupSAMLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetupSAMLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetupSAMLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetupSAMLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetupSAMLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetupSAMLRequestValidationError) ErrorName() string { return "SetupSAMLRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetupSAMLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetupSAMLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetupSAMLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetupSAMLRequestValidationError{}

// Validate checks the field values on SetupSAMLResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetupSAMLResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetupSAMLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetupSAMLResponseMultiError, or nil if none found.
func (m *SetupSAMLResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetupSAMLResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MetadataUrl

	if len(errors) > 0 {
		return SetupSAMLResponseMultiError(errors)
	}

	return nil
}

// SetupSAMLResponseMultiError is an error wrapping multiple validation errors
// returned by SetupSAMLResponse.ValidateAll() if the designated constraints
// aren't met.
type SetupSAMLResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetupSAMLResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetupSAMLResponseMultiError) AllErrors() []error { return m }

// SetupSAMLResponseValidationError is the validation error returned by
// SetupSAMLResponse.Validate if the designated constraints aren't met.
type SetupSAMLResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetupSAMLResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetupSAMLResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetupSAMLResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetupSAMLResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetupSAMLResponseValidationError) ErrorName() string {
	return "SetupSAMLResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetupSAMLResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetupSAMLResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetupSAMLResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetupSAMLResponseValidationError{}

// Validate checks the field values on SetSAMLIdentityProviderMetadataRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SetSAMLIdentityProviderMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SetSAMLIdentityProviderMetadataRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SetSAMLIdentityProviderMetadataRequestMultiError, or nil if none found.
func (m *SetSAMLIdentityProviderMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSAMLIdentityProviderMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Metadata

	if len(errors) > 0 {
		return SetSAMLIdentityProviderMetadataRequestMultiError(errors)
	}

	return nil
}

// SetSAMLIdentityProviderMetadataRequestMultiError is an error wrapping
// multiple validation errors returned by
// SetSAMLIdentityProviderMetadataRequest.ValidateAll() if the designated
// constraints aren't met.
type SetSAMLIdentityProviderMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSAMLIdentityProviderMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSAMLIdentityProviderMetadataRequestMultiError) AllErrors() []error { return m }

// SetSAMLIdentityProviderMetadataRequestValidationError is the validation
// error returned by SetSAMLIdentityProviderMetadataRequest.Validate if the
// designated constraints aren't met.
type SetSAMLIdentityProviderMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSAMLIdentityProviderMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSAMLIdentityProviderMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSAMLIdentityProviderMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSAMLIdentityProviderMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSAMLIdentityProviderMetadataRequestValidationError) ErrorName() string {
	return "SetSAMLIdentityProviderMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetSAMLIdentityProviderMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSAMLIdentityProviderMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSAMLIdentityProviderMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSAMLIdentityProviderMetadataRequestValidationError{}

// Validate checks the field values on SetSAMLIdentityProviderMetadataResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SetSAMLIdentityProviderMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SetSAMLIdentityProviderMetadataResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SetSAMLIdentityProviderMetadataResponseMultiError, or nil if none found.
func (m *SetSAMLIdentityProviderMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSAMLIdentityProviderMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetSAMLIdentityProviderMetadataResponseMultiError(errors)
	}

	return nil
}

// SetSAMLIdentityProviderMetadataResponseMultiError is an error wrapping
// multiple validation errors returned by
// SetSAMLIdentityProviderMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type SetSAMLIdentityProviderMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSAMLIdentityProviderMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSAMLIdentityProviderMetadataResponseMultiError) AllErrors() []error { return m }

// SetSAMLIdentityProviderMetadataResponseValidationError is the validation
// error returned by SetSAMLIdentityProviderMetadataResponse.Validate if the
// designated constraints aren't met.
type SetSAMLIdentityProviderMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSAMLIdentityProviderMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSAMLIdentityProviderMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSAMLIdentityProviderMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSAMLIdentityProviderMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSAMLIdentityProviderMetadataResponseValidationError) ErrorName() string {
	return "SetSAMLIdentityProviderMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetSAMLIdentityProviderMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSAMLIdentityProviderMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSAMLIdentityProviderMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSAMLIdentityProviderMetadataResponseValidationError{}

// Validate checks the field values on ChangeModeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangeModeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeModeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeModeRequestMultiError, or nil if none found.
func (m *ChangeModeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeModeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mode

	if len(errors) > 0 {
		return ChangeModeRequestMultiError(errors)
	}

	return nil
}

// ChangeModeRequestMultiError is an error wrapping multiple validation errors
// returned by ChangeModeRequest.ValidateAll() if the designated constraints
// aren't met.
type ChangeModeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeModeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeModeRequestMultiError) AllErrors() []error { return m }

// ChangeModeRequestValidationError is the validation error returned by
// ChangeModeRequest.Validate if the designated constraints aren't met.
type ChangeModeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeModeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeModeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeModeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeModeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeModeRequestValidationError) ErrorName() string {
	return "ChangeModeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeModeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeModeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeModeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeModeRequestValidationError{}

// Validate checks the field values on ChangeModeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeModeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeModeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeModeResponseMultiError, or nil if none found.
func (m *ChangeModeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeModeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeModeResponseMultiError(errors)
	}

	return nil
}

// ChangeModeResponseMultiError is an error wrapping multiple validation errors
// returned by ChangeModeResponse.ValidateAll() if the designated constraints
// aren't met.
type ChangeModeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeModeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeModeResponseMultiError) AllErrors() []error { return m }

// ChangeModeResponseValidationError is the validation error returned by
// ChangeModeResponse.Validate if the designated constraints aren't met.
type ChangeModeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeModeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeModeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeModeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeModeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeModeResponseValidationError) ErrorName() string {
	return "ChangeModeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeModeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeModeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeModeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeModeResponseValidationError{}

// Validate checks the field values on GetSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSettingsRequestMultiError, or nil if none found.
func (m *GetSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSettingsRequestMultiError(errors)
	}

	return nil
}

// GetSettingsRequestMultiError is an error wrapping multiple validation errors
// returned by GetSettingsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsRequestMultiError) AllErrors() []error { return m }

// GetSettingsRequestValidationError is the validation error returned by
// GetSettingsRequest.Validate if the designated constraints aren't met.
type GetSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsRequestValidationError) ErrorName() string {
	return "GetSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsRequestValidationError{}

// Validate checks the field values on GetSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSettingsResponseMultiError, or nil if none found.
func (m *GetSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mode

	// no validation rules for MetadataUrl

	// no validation rules for IdpMetadata

	// no validation rules for TestUrl

	if len(errors) > 0 {
		return GetSettingsResponseMultiError(errors)
	}

	return nil
}

// GetSettingsResponseMultiError is an error wrapping multiple validation
// errors returned by GetSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsResponseMultiError) AllErrors() []error { return m }

// GetSettingsResponseValidationError is the validation error returned by
// GetSettingsResponse.Validate if the designated constraints aren't met.
type GetSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsResponseValidationError) ErrorName() string {
	return "GetSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsResponseValidationError{}
