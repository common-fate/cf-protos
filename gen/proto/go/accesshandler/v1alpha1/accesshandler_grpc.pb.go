// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package accesshandlerv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccessHandlerServiceClient is the client API for AccessHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessHandlerServiceClient interface {
	NotifyGrantEvent(ctx context.Context, in *NotifyGrantEventRequest, opts ...grpc.CallOption) (*NotifyGrantEventResponse, error)
}

type accessHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessHandlerServiceClient(cc grpc.ClientConnInterface) AccessHandlerServiceClient {
	return &accessHandlerServiceClient{cc}
}

func (c *accessHandlerServiceClient) NotifyGrantEvent(ctx context.Context, in *NotifyGrantEventRequest, opts ...grpc.CallOption) (*NotifyGrantEventResponse, error) {
	out := new(NotifyGrantEventResponse)
	err := c.cc.Invoke(ctx, "/accesshandler.v1alpha1.AccessHandlerService/NotifyGrantEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessHandlerServiceServer is the server API for AccessHandlerService service.
// All implementations should embed UnimplementedAccessHandlerServiceServer
// for forward compatibility
type AccessHandlerServiceServer interface {
	NotifyGrantEvent(context.Context, *NotifyGrantEventRequest) (*NotifyGrantEventResponse, error)
}

// UnimplementedAccessHandlerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAccessHandlerServiceServer struct {
}

func (UnimplementedAccessHandlerServiceServer) NotifyGrantEvent(context.Context, *NotifyGrantEventRequest) (*NotifyGrantEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyGrantEvent not implemented")
}

// UnsafeAccessHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessHandlerServiceServer will
// result in compilation errors.
type UnsafeAccessHandlerServiceServer interface {
	mustEmbedUnimplementedAccessHandlerServiceServer()
}

func RegisterAccessHandlerServiceServer(s grpc.ServiceRegistrar, srv AccessHandlerServiceServer) {
	s.RegisterService(&AccessHandlerService_ServiceDesc, srv)
}

func _AccessHandlerService_NotifyGrantEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyGrantEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessHandlerServiceServer).NotifyGrantEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accesshandler.v1alpha1.AccessHandlerService/NotifyGrantEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessHandlerServiceServer).NotifyGrantEvent(ctx, req.(*NotifyGrantEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessHandlerService_ServiceDesc is the grpc.ServiceDesc for AccessHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accesshandler.v1alpha1.AccessHandlerService",
	HandlerType: (*AccessHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyGrantEvent",
			Handler:    _AccessHandlerService_NotifyGrantEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accesshandler/v1alpha1/accesshandler.proto",
}
