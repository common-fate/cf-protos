// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package loginv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoginServiceClient is the client API for LoginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginServiceClient interface {
	BeginBootstrap(ctx context.Context, in *BeginBootstrapRequest, opts ...grpc.CallOption) (*BeginBootstrapResponse, error)
	CompleteBootstrap(ctx context.Context, in *CompleteBootstrapRequest, opts ...grpc.CallOption) (*CompleteBootstrapResponse, error)
	// ExchangeCode exchanges a code obtained by the user from logging in
	// along with the Server Token obtained by the bootstrapping process
	// for a user's email address. The user is validated by the Login Service
	// as belong to the tenant this request is being made from.
	ExchangeCode(ctx context.Context, in *BeginCodeExchangeRequest, opts ...grpc.CallOption) (*BeginCodeExchangeResponse, error)
}

type loginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginServiceClient(cc grpc.ClientConnInterface) LoginServiceClient {
	return &loginServiceClient{cc}
}

func (c *loginServiceClient) BeginBootstrap(ctx context.Context, in *BeginBootstrapRequest, opts ...grpc.CallOption) (*BeginBootstrapResponse, error) {
	out := new(BeginBootstrapResponse)
	err := c.cc.Invoke(ctx, "/login.v1alpha1.LoginService/BeginBootstrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) CompleteBootstrap(ctx context.Context, in *CompleteBootstrapRequest, opts ...grpc.CallOption) (*CompleteBootstrapResponse, error) {
	out := new(CompleteBootstrapResponse)
	err := c.cc.Invoke(ctx, "/login.v1alpha1.LoginService/CompleteBootstrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) ExchangeCode(ctx context.Context, in *BeginCodeExchangeRequest, opts ...grpc.CallOption) (*BeginCodeExchangeResponse, error) {
	out := new(BeginCodeExchangeResponse)
	err := c.cc.Invoke(ctx, "/login.v1alpha1.LoginService/ExchangeCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginServiceServer is the server API for LoginService service.
// All implementations should embed UnimplementedLoginServiceServer
// for forward compatibility
type LoginServiceServer interface {
	BeginBootstrap(context.Context, *BeginBootstrapRequest) (*BeginBootstrapResponse, error)
	CompleteBootstrap(context.Context, *CompleteBootstrapRequest) (*CompleteBootstrapResponse, error)
	// ExchangeCode exchanges a code obtained by the user from logging in
	// along with the Server Token obtained by the bootstrapping process
	// for a user's email address. The user is validated by the Login Service
	// as belong to the tenant this request is being made from.
	ExchangeCode(context.Context, *BeginCodeExchangeRequest) (*BeginCodeExchangeResponse, error)
}

// UnimplementedLoginServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLoginServiceServer struct {
}

func (UnimplementedLoginServiceServer) BeginBootstrap(context.Context, *BeginBootstrapRequest) (*BeginBootstrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginBootstrap not implemented")
}
func (UnimplementedLoginServiceServer) CompleteBootstrap(context.Context, *CompleteBootstrapRequest) (*CompleteBootstrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteBootstrap not implemented")
}
func (UnimplementedLoginServiceServer) ExchangeCode(context.Context, *BeginCodeExchangeRequest) (*BeginCodeExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeCode not implemented")
}

// UnsafeLoginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginServiceServer will
// result in compilation errors.
type UnsafeLoginServiceServer interface {
	mustEmbedUnimplementedLoginServiceServer()
}

func RegisterLoginServiceServer(s grpc.ServiceRegistrar, srv LoginServiceServer) {
	s.RegisterService(&LoginService_ServiceDesc, srv)
}

func _LoginService_BeginBootstrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginBootstrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).BeginBootstrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.v1alpha1.LoginService/BeginBootstrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).BeginBootstrap(ctx, req.(*BeginBootstrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_CompleteBootstrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteBootstrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).CompleteBootstrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.v1alpha1.LoginService/CompleteBootstrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).CompleteBootstrap(ctx, req.(*CompleteBootstrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_ExchangeCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginCodeExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).ExchangeCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.v1alpha1.LoginService/ExchangeCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).ExchangeCode(ctx, req.(*BeginCodeExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginService_ServiceDesc is the grpc.ServiceDesc for LoginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "login.v1alpha1.LoginService",
	HandlerType: (*LoginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeginBootstrap",
			Handler:    _LoginService_BeginBootstrap_Handler,
		},
		{
			MethodName: "CompleteBootstrap",
			Handler:    _LoginService_CompleteBootstrap_Handler,
		},
		{
			MethodName: "ExchangeCode",
			Handler:    _LoginService_ExchangeCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "login/v1alpha1/login.proto",
}
