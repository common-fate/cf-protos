// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: login/v1alpha1/login.proto

package loginv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BeginBootstrapRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BeginBootstrapRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BeginBootstrapRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BeginBootstrapRequestMultiError, or nil if none found.
func (m *BeginBootstrapRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BeginBootstrapRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetAdminEmailAddress()); err != nil {
		err = BeginBootstrapRequestValidationError{
			field:  "AdminEmailAddress",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Pubkey

	// no validation rules for Version

	if len(errors) > 0 {
		return BeginBootstrapRequestMultiError(errors)
	}
	return nil
}

func (m *BeginBootstrapRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *BeginBootstrapRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// BeginBootstrapRequestMultiError is an error wrapping multiple validation
// errors returned by BeginBootstrapRequest.ValidateAll() if the designated
// constraints aren't met.
type BeginBootstrapRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BeginBootstrapRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BeginBootstrapRequestMultiError) AllErrors() []error { return m }

// BeginBootstrapRequestValidationError is the validation error returned by
// BeginBootstrapRequest.Validate if the designated constraints aren't met.
type BeginBootstrapRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BeginBootstrapRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BeginBootstrapRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BeginBootstrapRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BeginBootstrapRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BeginBootstrapRequestValidationError) ErrorName() string {
	return "BeginBootstrapRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BeginBootstrapRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBeginBootstrapRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BeginBootstrapRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BeginBootstrapRequestValidationError{}

// Validate checks the field values on BeginBootstrapResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BeginBootstrapResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BeginBootstrapResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BeginBootstrapResponseMultiError, or nil if none found.
func (m *BeginBootstrapResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BeginBootstrapResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Challenge

	if len(errors) > 0 {
		return BeginBootstrapResponseMultiError(errors)
	}
	return nil
}

// BeginBootstrapResponseMultiError is an error wrapping multiple validation
// errors returned by BeginBootstrapResponse.ValidateAll() if the designated
// constraints aren't met.
type BeginBootstrapResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BeginBootstrapResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BeginBootstrapResponseMultiError) AllErrors() []error { return m }

// BeginBootstrapResponseValidationError is the validation error returned by
// BeginBootstrapResponse.Validate if the designated constraints aren't met.
type BeginBootstrapResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BeginBootstrapResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BeginBootstrapResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BeginBootstrapResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BeginBootstrapResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BeginBootstrapResponseValidationError) ErrorName() string {
	return "BeginBootstrapResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BeginBootstrapResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBeginBootstrapResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BeginBootstrapResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BeginBootstrapResponseValidationError{}

// Validate checks the field values on CompleteBootstrapRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteBootstrapRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteBootstrapRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompleteBootstrapRequestMultiError, or nil if none found.
func (m *CompleteBootstrapRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteBootstrapRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Challenge

	// no validation rules for Sig

	if len(errors) > 0 {
		return CompleteBootstrapRequestMultiError(errors)
	}
	return nil
}

// CompleteBootstrapRequestMultiError is an error wrapping multiple validation
// errors returned by CompleteBootstrapRequest.ValidateAll() if the designated
// constraints aren't met.
type CompleteBootstrapRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteBootstrapRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteBootstrapRequestMultiError) AllErrors() []error { return m }

// CompleteBootstrapRequestValidationError is the validation error returned by
// CompleteBootstrapRequest.Validate if the designated constraints aren't met.
type CompleteBootstrapRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteBootstrapRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteBootstrapRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteBootstrapRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteBootstrapRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteBootstrapRequestValidationError) ErrorName() string {
	return "CompleteBootstrapRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteBootstrapRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteBootstrapRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteBootstrapRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteBootstrapRequestValidationError{}

// Validate checks the field values on CompleteBootstrapResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteBootstrapResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteBootstrapResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompleteBootstrapResponseMultiError, or nil if none found.
func (m *CompleteBootstrapResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteBootstrapResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerToken

	if all {
		switch v := interface{}(m.GetServerTokenExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompleteBootstrapResponseValidationError{
					field:  "ServerTokenExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompleteBootstrapResponseValidationError{
					field:  "ServerTokenExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServerTokenExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompleteBootstrapResponseValidationError{
				field:  "ServerTokenExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserToken

	if len(errors) > 0 {
		return CompleteBootstrapResponseMultiError(errors)
	}
	return nil
}

// CompleteBootstrapResponseMultiError is an error wrapping multiple validation
// errors returned by CompleteBootstrapResponse.ValidateAll() if the
// designated constraints aren't met.
type CompleteBootstrapResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteBootstrapResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteBootstrapResponseMultiError) AllErrors() []error { return m }

// CompleteBootstrapResponseValidationError is the validation error returned by
// CompleteBootstrapResponse.Validate if the designated constraints aren't met.
type CompleteBootstrapResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteBootstrapResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteBootstrapResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteBootstrapResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteBootstrapResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteBootstrapResponseValidationError) ErrorName() string {
	return "CompleteBootstrapResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteBootstrapResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteBootstrapResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteBootstrapResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteBootstrapResponseValidationError{}

// Validate checks the field values on ExchangeCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeCodeRequestMultiError, or nil if none found.
func (m *ExchangeCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerToken

	// no validation rules for Code

	if len(errors) > 0 {
		return ExchangeCodeRequestMultiError(errors)
	}
	return nil
}

// ExchangeCodeRequestMultiError is an error wrapping multiple validation
// errors returned by ExchangeCodeRequest.ValidateAll() if the designated
// constraints aren't met.
type ExchangeCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeCodeRequestMultiError) AllErrors() []error { return m }

// ExchangeCodeRequestValidationError is the validation error returned by
// ExchangeCodeRequest.Validate if the designated constraints aren't met.
type ExchangeCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeCodeRequestValidationError) ErrorName() string {
	return "ExchangeCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeCodeRequestValidationError{}

// Validate checks the field values on ExchangeCodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeCodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeCodeResponseMultiError, or nil if none found.
func (m *ExchangeCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserEmailAddress

	if len(errors) > 0 {
		return ExchangeCodeResponseMultiError(errors)
	}
	return nil
}

// ExchangeCodeResponseMultiError is an error wrapping multiple validation
// errors returned by ExchangeCodeResponse.ValidateAll() if the designated
// constraints aren't met.
type ExchangeCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeCodeResponseMultiError) AllErrors() []error { return m }

// ExchangeCodeResponseValidationError is the validation error returned by
// ExchangeCodeResponse.Validate if the designated constraints aren't met.
type ExchangeCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeCodeResponseValidationError) ErrorName() string {
	return "ExchangeCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeCodeResponseValidationError{}
